"""A Aggregation the DAL should perform"""
input Aggregation {
  """The aggregation type"""
  type: AggregationTypes!

  """The name of the aggregation"""
  name: String!

  """The field used to aggregate"""
  field: String!

  """The fields used to group the result"""
  groupByFields: [String]
}

"""Contains the result of a single aggregation"""
type AggregationBucket {
  """The Keys of this aggregation bucket"""
  keys: [AggregationKey]

  """The result of the aggregation"""
  results: [AggregationResult]
}

"""A key of the Aggregation Bucket"""
type AggregationKey {
  """The field used to group the result"""
  field: String

  """The value for the groupByKey"""
  value: String
}

"""Contains the result of a single aggregation"""
type AggregationResult {
  """The type of the aggregation"""
  type: String

  """The result of the aggregation"""
  result: String
}

"""Contains the results of the aggregations"""
type AggregationResults {
  """Name of the aggregation"""
  name: String

  """Contains an aggregationResult"""
  buckets: [AggregationBucket]
}

"""The AggregationTypes the DAL can perform"""
enum AggregationTypes {
  """Performs an average aggregation"""
  avg

  """Performs a cardinality aggregation"""
  cardinality

  """Performs a count aggregation"""
  count

  """Performs a maximum aggregation"""
  max

  """Performs a minimum aggregation"""
  min

  """Performs a stats aggregation"""
  stats

  """Performs a sum aggregation"""
  sum

  """Performs a value count aggregation"""
  value_count
}

type Attribute {
  id: ID!
  name: String!
  type: String!
  config: Json
  attributeSetId: ID
  attributeSet: AttributeSet
  createdAt: Date!
  updatedAt: Date!
}

"""The Result for a search that returns multiple Items"""
type AttributeConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [AttributeEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

"""Contains the information for one Edge"""
type AttributeEdge {
  """The Node of the Edge that contains the real element"""
  node: Attribute

  """The cursor to the Item of the Edge"""
  cursor: ID
}

type AttributeSet {
  id: ID!
  name: String!
  config: Json
  attributes(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): AttributeConnection
  relations(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): AttributeSetRelationConnection
  createdAt: Date!
  updatedAt: Date!
}

"""The Result for a search that returns multiple Items"""
type AttributeSetConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [AttributeSetEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

"""Contains the information for one Edge"""
type AttributeSetEdge {
  """The Node of the Edge that contains the real element"""
  node: AttributeSet

  """The cursor to the Item of the Edge"""
  cursor: ID
}

type AttributeSetRelation {
  id: ID!
  attributeSetId: ID!
  entityName: String!
  attributeSet: AttributeSet
  createdAt: Date!
  updatedAt: Date!
}

"""The Result for a search that returns multiple Items"""
type AttributeSetRelationConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [AttributeSetRelationEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

"""Contains the information for one Edge"""
type AttributeSetRelationEdge {
  """The Node of the Edge that contains the real element"""
  node: AttributeSetRelation

  """The cursor to the Item of the Edge"""
  cursor: ID
}

type CalculatedPriceFieldTest {
  id: ID!
  versionId: ID!
  price: Json!
}

"""The Result for a search that returns multiple Items"""
type CalculatedPriceFieldTestConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [CalculatedPriceFieldTestEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

"""Contains the information for one Edge"""
type CalculatedPriceFieldTestEdge {
  """The Node of the Edge that contains the real element"""
  node: CalculatedPriceFieldTest

  """The cursor to the Item of the Edge"""
  cursor: ID
}

type Category {
  id: ID!
  versionId: ID!
  parentId: ID
  parentVersionId: ID!
  afterCategoryId: ID
  afterCategoryVersionId: ID!
  mediaId: ID
  displayNestedProducts: Boolean!
  autoIncrement: Int
  path: String
  level: Int
  active: Boolean
  childCount: Int
  createdAt: Date!
  updatedAt: Date!
  name: String
  attributes: String
  parent: Category
  media: Media
  children(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): CategoryConnection
  translations: CategoryTranslationConnection!
  navigations(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): NavigationConnection
  products(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): ProductConnection
  nestedProducts(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): ProductConnection
  tags(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): TagConnection
  translated: Json
}

"""The Result for a search that returns multiple Items"""
type CategoryConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [CategoryEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

"""Contains the information for one Edge"""
type CategoryEdge {
  """The Node of the Edge that contains the real element"""
  node: Category

  """The cursor to the Item of the Edge"""
  cursor: ID
}

type CategoryTranslation {
  name: String!
  attributes: Json
  categoryId: ID!
  languageId: ID!
  createdAt: Date!
  updatedAt: Date!
  category: Category
  language: Language
  categoryVersionId: ID!
}

"""The Result for a search that returns multiple Items"""
type CategoryTranslationConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [CategoryTranslationEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

"""Contains the information for one Edge"""
type CategoryTranslationEdge {
  """The Node of the Edge that contains the real element"""
  node: CategoryTranslation

  """The cursor to the Item of the Edge"""
  cursor: ID
}

type CmsBlock {
  id: ID!
  position: Int!
  type: String!
  config: Json
  pageId: ID!
  page: CmsPage
  slots(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): CmsSlotConnection
  createdAt: Date!
  updatedAt: Date!
  attributes: Json
}

"""The Result for a search that returns multiple Items"""
type CmsBlockConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [CmsBlockEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

"""Contains the information for one Edge"""
type CmsBlockEdge {
  """The Node of the Edge that contains the real element"""
  node: CmsBlock

  """The cursor to the Item of the Edge"""
  cursor: ID
}

type CmsPage {
  id: ID!
  name: String
  type: String!
  entity: String
  config: Json
  attributes: String
  blocks(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): CmsBlockConnection
  translations(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): CmsPageTranslationConnection
  navigations(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): NavigationConnection
  createdAt: Date!
  updatedAt: Date!
  translated: Json
}

"""The Result for a search that returns multiple Items"""
type CmsPageConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [CmsPageEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

"""Contains the information for one Edge"""
type CmsPageEdge {
  """The Node of the Edge that contains the real element"""
  node: CmsPage

  """The cursor to the Item of the Edge"""
  cursor: ID
}

type CmsPageTranslation {
  name: String!
  attributes: Json
  cmsPageId: ID!
  languageId: ID!
  createdAt: Date!
  updatedAt: Date!
  cmsPage: CmsPage
  language: Language
}

"""The Result for a search that returns multiple Items"""
type CmsPageTranslationConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [CmsPageTranslationEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

"""Contains the information for one Edge"""
type CmsPageTranslationEdge {
  """The Node of the Edge that contains the real element"""
  node: CmsPageTranslation

  """The cursor to the Item of the Edge"""
  cursor: ID
}

type CmsSlot {
  id: ID!
  versionId: ID!
  type: String!
  slot: String!
  config: String
  attributes: String
  data: Json
  blockId: ID!
  block: CmsBlock
  translations: CmsSlotTranslationConnection!
  createdAt: Date!
  updatedAt: Date!
  translated: Json
}

"""The Result for a search that returns multiple Items"""
type CmsSlotConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [CmsSlotEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

"""Contains the information for one Edge"""
type CmsSlotEdge {
  """The Node of the Edge that contains the real element"""
  node: CmsSlot

  """The cursor to the Item of the Edge"""
  cursor: ID
}

type CmsSlotTranslation {
  config: Json!
  attributes: Json
  cmsSlotId: ID!
  languageId: ID!
  createdAt: Date!
  updatedAt: Date!
  cmsSlot: CmsSlot
  language: Language
  cmsSlotVersionId: ID!
}

"""The Result for a search that returns multiple Items"""
type CmsSlotTranslationConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [CmsSlotTranslationEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

"""Contains the information for one Edge"""
type CmsSlotTranslationEdge {
  """The Node of the Edge that contains the real element"""
  node: CmsSlotTranslation

  """The cursor to the Item of the Edge"""
  cursor: ID
}

type Country {
  id: ID!
  name: String
  iso: String
  position: Int
  taxFree: Boolean
  active: Boolean
  iso3: String
  displayStateInRegistration: Boolean
  forceStateInRegistration: Boolean
  attributes: String
  createdAt: Date!
  updatedAt: Date!
  salesChannelDefaultAssignments(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): SalesChannelConnection
  states(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): CountryStateConnection
  translations: CountryTranslationConnection!
  customerAddresses(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): CustomerAddressConnection
  orderAddresses(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): OrderAddressConnection
  salesChannels(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): SalesChannelConnection
  translated: Json
}

"""The Result for a search that returns multiple Items"""
type CountryConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [CountryEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

"""Contains the information for one Edge"""
type CountryEdge {
  """The Node of the Edge that contains the real element"""
  node: Country

  """The cursor to the Item of the Edge"""
  cursor: ID
}

type CountryState {
  id: ID!
  countryId: ID!
  shortCode: String!
  name: String
  position: Int
  active: Boolean
  attributes: String
  createdAt: Date!
  updatedAt: Date!
  country: Country
  translations: CountryStateTranslationConnection!
  customerAddresses(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): CustomerAddressConnection
  orderAddresses(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): OrderAddressConnection
  translated: Json
}

"""The Result for a search that returns multiple Items"""
type CountryStateConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [CountryStateEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

"""Contains the information for one Edge"""
type CountryStateEdge {
  """The Node of the Edge that contains the real element"""
  node: CountryState

  """The cursor to the Item of the Edge"""
  cursor: ID
}

type CountryStateTranslation {
  name: String!
  attributes: Json
  countryStateId: ID!
  languageId: ID!
  createdAt: Date!
  updatedAt: Date!
  countryState: CountryState
  language: Language
}

"""The Result for a search that returns multiple Items"""
type CountryStateTranslationConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [CountryStateTranslationEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

"""Contains the information for one Edge"""
type CountryStateTranslationEdge {
  """The Node of the Edge that contains the real element"""
  node: CountryStateTranslation

  """The cursor to the Item of the Edge"""
  cursor: ID
}

type CountryTranslation {
  name: String!
  attributes: Json
  countryId: ID!
  languageId: ID!
  createdAt: Date!
  updatedAt: Date!
  country: Country
  language: Language
}

"""The Result for a search that returns multiple Items"""
type CountryTranslationConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [CountryTranslationEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

"""Contains the information for one Edge"""
type CountryTranslationEdge {
  """The Node of the Edge that contains the real element"""
  node: CountryTranslation

  """The cursor to the Item of the Edge"""
  cursor: ID
}

type Currency {
  id: ID!
  factor: Float!
  symbol: String!
  shortName: String
  name: String
  decimalPrecision: Int!
  position: Int
  isDefault: Boolean
  attributes: String
  createdAt: Date!
  updatedAt: Date!
  salesChannelDefaultAssignments(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): SalesChannelConnection
  translations: CurrencyTranslationConnection!
  orders(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): OrderConnection
  productPrices(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): ProductPriceConnection
  shippingMethodPrices(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): ShippingMethodPriceConnection
  salesChannels(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): SalesChannelConnection
  salesChannelDomains(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): SalesChannelDomainConnection
  translated: Json
}

"""The Result for a search that returns multiple Items"""
type CurrencyConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [CurrencyEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

"""Contains the information for one Edge"""
type CurrencyEdge {
  """The Node of the Edge that contains the real element"""
  node: Currency

  """The cursor to the Item of the Edge"""
  cursor: ID
}

type CurrencyTranslation {
  shortName: String!
  name: String!
  attributes: Json
  currencyId: ID!
  languageId: ID!
  createdAt: Date!
  updatedAt: Date!
  currency: Currency
  language: Language
}

"""The Result for a search that returns multiple Items"""
type CurrencyTranslationConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [CurrencyTranslationEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

"""Contains the information for one Edge"""
type CurrencyTranslationEdge {
  """The Node of the Edge that contains the real element"""
  node: CurrencyTranslation

  """The cursor to the Item of the Edge"""
  cursor: ID
}

type Customer {
  id: ID!
  groupId: ID!
  defaultPaymentMethodId: ID!
  salesChannelId: ID!
  languageId: ID!
  lastPaymentMethodId: ID
  defaultBillingAddressId: ID!
  defaultShippingAddressId: ID!
  autoIncrement: Int
  customerNumber: String!
  salutationId: ID!
  firstName: String!
  lastName: String!
  company: String
  email: String!
  title: String
  active: Boolean
  guest: Boolean
  firstLogin: Date
  lastLogin: Date
  newsletter: Boolean
  birthday: Date
  attributes: Json
  createdAt: Date!
  updatedAt: Date!
  legacyPassword: String
  legacyEncoder: String
  group: CustomerGroup
  defaultPaymentMethod: PaymentMethod
  salesChannel: SalesChannel
  language: Language
  lastPaymentMethod: PaymentMethod
  defaultBillingAddress: CustomerAddress
  defaultShippingAddress: CustomerAddress
  salutation: Salutation
  addresses(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): CustomerAddressConnection
  orderCustomers(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): OrderCustomerConnection
  tags(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): TagConnection
}

type CustomerAddress {
  id: ID!
  customerId: ID!
  countryId: ID!
  countryStateId: ID
  salutationId: ID!
  firstName: String!
  lastName: String!
  zipcode: String!
  city: String!
  company: String
  street: String!
  department: String
  title: String
  vatId: String
  phoneNumber: String
  additionalAddressLine1: String
  additionalAddressLine2: String
  attributes: Json
  createdAt: Date!
  updatedAt: Date!
  customer: Customer
  country: Country
  countryState: CountryState
  salutation: Salutation
}

"""The Result for a search that returns multiple Items"""
type CustomerAddressConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [CustomerAddressEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

"""Contains the information for one Edge"""
type CustomerAddressEdge {
  """The Node of the Edge that contains the real element"""
  node: CustomerAddress

  """The cursor to the Item of the Edge"""
  cursor: ID
}

"""The Result for a search that returns multiple Items"""
type CustomerConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [CustomerEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

"""Contains the information for one Edge"""
type CustomerEdge {
  """The Node of the Edge that contains the real element"""
  node: Customer

  """The cursor to the Item of the Edge"""
  cursor: ID
}

type CustomerGroup {
  id: ID!
  name: String
  displayGross: Boolean
  attributes: String
  createdAt: Date!
  updatedAt: Date!
  customers(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): CustomerConnection
  salesChannels(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): SalesChannelConnection
  translations: CustomerGroupTranslationConnection!
  translated: Json
}

"""The Result for a search that returns multiple Items"""
type CustomerGroupConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [CustomerGroupEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

"""Contains the information for one Edge"""
type CustomerGroupEdge {
  """The Node of the Edge that contains the real element"""
  node: CustomerGroup

  """The cursor to the Item of the Edge"""
  cursor: ID
}

type CustomerGroupTranslation {
  name: String!
  attributes: Json
  customerGroupId: ID!
  languageId: ID!
  createdAt: Date!
  updatedAt: Date!
  customerGroup: CustomerGroup
  language: Language
}

"""The Result for a search that returns multiple Items"""
type CustomerGroupTranslationConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [CustomerGroupTranslationEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

"""Contains the information for one Edge"""
type CustomerGroupTranslationEdge {
  """The Node of the Edge that contains the real element"""
  node: CustomerGroupTranslation

  """The cursor to the Item of the Edge"""
  cursor: ID
}

scalar Date

type DeadMessage {
  id: ID!
  originalMessageClass: String!
  handlerClass: String!
  encrypted: Boolean!
  errorCount: Int!
  nextExecutionTime: Date!
  exception: String!
  exceptionMessage: String!
  exceptionFile: String!
  exceptionLine: Int!
  scheduledTaskId: ID
  createdAt: Date!
  updatedAt: Date!
  scheduledTask: ScheduledTask
}

"""The Result for a search that returns multiple Items"""
type DeadMessageConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [DeadMessageEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

"""Contains the information for one Edge"""
type DeadMessageEdge {
  """The Node of the Edge that contains the real element"""
  node: DeadMessage

  """The cursor to the Item of the Edge"""
  cursor: ID
}

type DeliveryTime {
  id: ID!
  name: String!
  min: Int!
  max: Int!
  unit: String!
  attributes: String
  createdAt: Date!
  updatedAt: Date!
  shippingMethods(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): ShippingMethodConnection
  translations: DeliveryTimeTranslationConnection!
  translated: Json
}

"""The Result for a search that returns multiple Items"""
type DeliveryTimeConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [DeliveryTimeEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

"""Contains the information for one Edge"""
type DeliveryTimeEdge {
  """The Node of the Edge that contains the real element"""
  node: DeliveryTime

  """The cursor to the Item of the Edge"""
  cursor: ID
}

type DeliveryTimeTranslation {
  name: String!
  attributes: Json
  deliveryTimeId: ID!
  languageId: ID!
  createdAt: Date!
  updatedAt: Date!
  deliveryTime: DeliveryTime
  language: Language
}

"""The Result for a search that returns multiple Items"""
type DeliveryTimeTranslationConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [DeliveryTimeTranslationEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

"""Contains the information for one Edge"""
type DeliveryTimeTranslationEdge {
  """The Node of the Edge that contains the real element"""
  node: DeliveryTimeTranslation

  """The cursor to the Item of the Edge"""
  cursor: ID
}

type DiscountSurcharge {
  id: ID!
  name: String
  ruleId: ID!
  type: String!
  amount: Float!
  attributes: String
  createdAt: Date!
  updatedAt: Date!
  translations: DiscountSurchargeTranslationConnection!
  rule: Rule
  translated: Json
}

"""The Result for a search that returns multiple Items"""
type DiscountSurchargeConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [DiscountSurchargeEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

"""Contains the information for one Edge"""
type DiscountSurchargeEdge {
  """The Node of the Edge that contains the real element"""
  node: DiscountSurcharge

  """The cursor to the Item of the Edge"""
  cursor: ID
}

type DiscountSurchargeTranslation {
  name: String!
  attributes: Json
  discountSurchargeId: ID!
  languageId: ID!
  createdAt: Date!
  updatedAt: Date!
  discountSurcharge: DiscountSurcharge
  language: Language
}

"""The Result for a search that returns multiple Items"""
type DiscountSurchargeTranslationConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [DiscountSurchargeTranslationEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

"""Contains the information for one Edge"""
type DiscountSurchargeTranslationEdge {
  """The Node of the Edge that contains the real element"""
  node: DiscountSurchargeTranslation

  """The cursor to the Item of the Edge"""
  cursor: ID
}

type Document {
  id: ID!
  type: String!
  orderId: ID!
  orderVersionId: ID!
  config: Json
  sent: Boolean
  createdAt: Date!
  order: Order
}

"""The Result for a search that returns multiple Items"""
type DocumentConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [DocumentEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

"""Contains the information for one Edge"""
type DocumentEdge {
  """The Node of the Edge that contains the real element"""
  node: Document

  """The cursor to the Item of the Edge"""
  cursor: ID
}

type EventAction {
  id: ID!
  eventName: String!
  actionName: String!
  config: Json
  createdAt: Date!
  updatedAt: Date!
}

"""The Result for a search that returns multiple Items"""
type EventActionConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [EventActionEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

"""Contains the information for one Edge"""
type EventActionEdge {
  """The Node of the Edge that contains the real element"""
  node: EventAction

  """The cursor to the Item of the Edge"""
  cursor: ID
}

input InputAttribute {
  id: ID
  name: String
  type: String
  config: Json
  attributeSetId: ID
  attributeSet: InputAttributeSet
  createdAt: Date
  updatedAt: Date
}

input InputAttributeSet {
  id: ID
  name: String
  config: Json
  attributes: [InputAttribute]
  relations: [InputAttributeSetRelation]
  createdAt: Date
  updatedAt: Date
}

input InputAttributeSetRelation {
  id: ID
  attributeSetId: ID
  entityName: String
  attributeSet: InputAttributeSet
  createdAt: Date
  updatedAt: Date
}

input InputCategory {
  id: ID
  versionId: ID
  parentId: ID
  parentVersionId: ID
  afterCategoryId: ID
  afterCategoryVersionId: ID
  mediaId: ID
  displayNestedProducts: Boolean
  autoIncrement: Int
  path: String
  level: Int
  active: Boolean
  childCount: Int
  createdAt: Date
  updatedAt: Date
  name: String
  attributes: String
  parent: InputCategory
  media: InputMedia
  children: [InputCategory]
  translations: [InputCategoryTranslation]
  navigations: [InputNavigation]
  products: [InputProduct]
  nestedProducts: [InputProduct]
  tags: [InputTag]
  translated: Json
}

input InputCategoryTranslation {
  name: String
  attributes: Json
  categoryId: ID
  languageId: ID
  createdAt: Date
  updatedAt: Date
  category: InputCategory
  language: InputLanguage
  categoryVersionId: ID
}

input InputCmsBlock {
  id: ID
  position: Int
  type: String
  config: Json
  pageId: ID
  page: InputCmsPage
  slots: [InputCmsSlot]
  createdAt: Date
  updatedAt: Date
  attributes: Json
}

input InputCmsPage {
  id: ID
  name: String
  type: String
  entity: String
  config: Json
  attributes: String
  blocks: [InputCmsBlock]
  translations: [InputCmsPageTranslation]
  navigations: [InputNavigation]
  createdAt: Date
  updatedAt: Date
  translated: Json
}

input InputCmsPageTranslation {
  name: String
  attributes: Json
  cmsPageId: ID
  languageId: ID
  createdAt: Date
  updatedAt: Date
  cmsPage: InputCmsPage
  language: InputLanguage
}

input InputCmsSlot {
  id: ID
  versionId: ID
  type: String
  slot: String
  config: String
  attributes: String
  data: Json
  blockId: ID
  block: InputCmsBlock
  translations: [InputCmsSlotTranslation]
  createdAt: Date
  updatedAt: Date
  translated: Json
}

input InputCmsSlotTranslation {
  config: Json
  attributes: Json
  cmsSlotId: ID
  languageId: ID
  createdAt: Date
  updatedAt: Date
  cmsSlot: InputCmsSlot
  language: InputLanguage
  cmsSlotVersionId: ID
}

input InputCountry {
  id: ID
  name: String
  iso: String
  position: Int
  taxFree: Boolean
  active: Boolean
  iso3: String
  displayStateInRegistration: Boolean
  forceStateInRegistration: Boolean
  attributes: String
  createdAt: Date
  updatedAt: Date
  salesChannelDefaultAssignments: [InputSalesChannel]
  states: [InputCountryState]
  translations: [InputCountryTranslation]
  customerAddresses: [InputCustomerAddress]
  orderAddresses: [InputOrderAddress]
  salesChannels: [InputSalesChannel]
  translated: Json
}

input InputCountryState {
  id: ID
  countryId: ID
  shortCode: String
  name: String
  position: Int
  active: Boolean
  attributes: String
  createdAt: Date
  updatedAt: Date
  country: InputCountry
  translations: [InputCountryStateTranslation]
  customerAddresses: [InputCustomerAddress]
  orderAddresses: [InputOrderAddress]
  translated: Json
}

input InputCountryStateTranslation {
  name: String
  attributes: Json
  countryStateId: ID
  languageId: ID
  createdAt: Date
  updatedAt: Date
  countryState: InputCountryState
  language: InputLanguage
}

input InputCountryTranslation {
  name: String
  attributes: Json
  countryId: ID
  languageId: ID
  createdAt: Date
  updatedAt: Date
  country: InputCountry
  language: InputLanguage
}

input InputCurrency {
  id: ID
  factor: Float
  symbol: String
  shortName: String
  name: String
  decimalPrecision: Int
  position: Int
  isDefault: Boolean
  attributes: String
  createdAt: Date
  updatedAt: Date
  salesChannelDefaultAssignments: [InputSalesChannel]
  translations: [InputCurrencyTranslation]
  orders: [InputOrder]
  productPrices: [InputProductPrice]
  shippingMethodPrices: [InputShippingMethodPrice]
  salesChannels: [InputSalesChannel]
  salesChannelDomains: [InputSalesChannelDomain]
  translated: Json
}

input InputCurrencyTranslation {
  shortName: String
  name: String
  attributes: Json
  currencyId: ID
  languageId: ID
  createdAt: Date
  updatedAt: Date
  currency: InputCurrency
  language: InputLanguage
}

input InputCustomer {
  id: ID
  groupId: ID
  defaultPaymentMethodId: ID
  salesChannelId: ID
  languageId: ID
  lastPaymentMethodId: ID
  defaultBillingAddressId: ID
  defaultShippingAddressId: ID
  autoIncrement: Int
  customerNumber: String
  salutationId: ID
  firstName: String
  lastName: String
  company: String
  email: String
  title: String
  active: Boolean
  guest: Boolean
  firstLogin: Date
  lastLogin: Date
  newsletter: Boolean
  birthday: Date
  attributes: Json
  createdAt: Date
  updatedAt: Date
  legacyPassword: String
  legacyEncoder: String
  group: InputCustomerGroup
  defaultPaymentMethod: InputPaymentMethod
  salesChannel: InputSalesChannel
  language: InputLanguage
  lastPaymentMethod: InputPaymentMethod
  defaultBillingAddress: InputCustomerAddress
  defaultShippingAddress: InputCustomerAddress
  salutation: InputSalutation
  addresses: [InputCustomerAddress]
  orderCustomers: [InputOrderCustomer]
  tags: [InputTag]
}

input InputCustomerAddress {
  id: ID
  customerId: ID
  countryId: ID
  countryStateId: ID
  salutationId: ID
  firstName: String
  lastName: String
  zipcode: String
  city: String
  company: String
  street: String
  department: String
  title: String
  vatId: String
  phoneNumber: String
  additionalAddressLine1: String
  additionalAddressLine2: String
  attributes: Json
  createdAt: Date
  updatedAt: Date
  customer: InputCustomer
  country: InputCountry
  countryState: InputCountryState
  salutation: InputSalutation
}

input InputCustomerGroup {
  id: ID
  name: String
  displayGross: Boolean
  attributes: String
  createdAt: Date
  updatedAt: Date
  customers: [InputCustomer]
  salesChannels: [InputSalesChannel]
  translations: [InputCustomerGroupTranslation]
  translated: Json
}

input InputCustomerGroupTranslation {
  name: String
  attributes: Json
  customerGroupId: ID
  languageId: ID
  createdAt: Date
  updatedAt: Date
  customerGroup: InputCustomerGroup
  language: InputLanguage
}

input InputDeadMessage {
  id: ID
  originalMessageClass: String
  handlerClass: String
  encrypted: Boolean
  errorCount: Int
  nextExecutionTime: Date
  exception: String
  exceptionMessage: String
  exceptionFile: String
  exceptionLine: Int
  scheduledTaskId: ID
  createdAt: Date
  updatedAt: Date
  scheduledTask: InputScheduledTask
}

input InputDeliveryTime {
  id: ID
  name: String
  min: Int
  max: Int
  unit: String
  attributes: String
  createdAt: Date
  updatedAt: Date
  shippingMethods: [InputShippingMethod]
  translations: [InputDeliveryTimeTranslation]
  translated: Json
}

input InputDeliveryTimeTranslation {
  name: String
  attributes: Json
  deliveryTimeId: ID
  languageId: ID
  createdAt: Date
  updatedAt: Date
  deliveryTime: InputDeliveryTime
  language: InputLanguage
}

input InputDiscountSurcharge {
  id: ID
  name: String
  ruleId: ID
  type: String
  amount: Float
  attributes: String
  createdAt: Date
  updatedAt: Date
  translations: [InputDiscountSurchargeTranslation]
  rule: InputRule
  translated: Json
}

input InputDiscountSurchargeTranslation {
  name: String
  attributes: Json
  discountSurchargeId: ID
  languageId: ID
  createdAt: Date
  updatedAt: Date
  discountSurcharge: InputDiscountSurcharge
  language: InputLanguage
}

input InputDocument {
  id: ID
  type: String
  orderId: ID
  orderVersionId: ID
  config: Json
  sent: Boolean
  createdAt: Date
  order: InputOrder
}

input InputLanguage {
  id: ID
  parentId: ID
  localeId: ID
  translationCodeId: ID
  name: String
  attributes: Json
  createdAt: Date
  updatedAt: Date
  parent: InputLanguage
  locale: InputLocale
  translationCode: InputLocale
  children: [InputLanguage]
  salesChannels: [InputSalesChannel]
  salesChannelDefaultAssignments: [InputSalesChannel]
  salesChannelDomains: [InputSalesChannelDomain]
  customers: [InputCustomer]
  newsletterReceivers: [InputNewsletterReceiver]
  categoryTranslations: [InputCategoryTranslation]
  countryStateTranslations: [InputCountryStateTranslation]
  countryTranslations: [InputCountryTranslation]
  currencyTranslations: [InputCurrencyTranslation]
  customerGroupTranslations: [InputCustomerGroupTranslation]
  localeTranslations: [InputLocaleTranslation]
  mediaTranslations: [InputMediaTranslation]
  paymentMethodTranslations: [InputPaymentMethodTranslation]
  productManufacturerTranslations: [InputProductManufacturerTranslation]
  productTranslations: [InputProductTranslation]
  shippingMethodTranslations: [InputShippingMethodTranslation]
  unitTranslations: [InputUnitTranslation]
  propertyGroupTranslations: [InputPropertyGroupTranslation]
  propertyGroupOptionTranslations: [InputPropertyGroupOptionTranslation]
  discountSurchargeTranslations: [InputDiscountSurchargeTranslation]
  salesChannelTranslations: [InputSalesChannelTranslation]
  salesChannelTypeTranslations: [InputSalesChannelTypeTranslation]
  salutationTranslations: [InputSalutationTranslation]
  searchDocuments: [InputSearchDocument]
  pluginTranslations: [InputPluginTranslation]
  productStreamTranslations: [InputProductStreamTranslation]
  stateMachineTranslations: [InputStateMachineTranslation]
  stateMachineStateTranslations: [InputStateMachineStateTranslation]
  cmsPageTranslations: [InputCmsPageTranslation]
  cmsSlotTranslations: [InputCmsSlotTranslation]
  navigationTranslations: [InputNavigationTranslation]
  mailTemplateTranslations: [InputMailTemplateTranslation]
  mailHeaderFooterTranslations: [InputMailHeaderFooterTranslation]
  numberRangeTypeTranslations: [InputNumberRangeTypeTranslation]
  deliveryTimeTranslations: [InputDeliveryTimeTranslation]
}

input InputLocale {
  id: ID
  code: String
  name: String
  territory: String
  attributes: String
  createdAt: Date
  updatedAt: Date
  languages: [InputLanguage]
  translations: [InputLocaleTranslation]
  users: [InputUser]
  translated: Json
}

input InputLocaleTranslation {
  name: String
  territory: String
  attributes: Json
  localeId: ID
  languageId: ID
  createdAt: Date
  updatedAt: Date
  locale: InputLocale
  language: InputLanguage
}

input InputMailHeaderFooter {
  id: ID
  systemDefault: Boolean
  name: String
  description: String
  headerHtml: String
  headerPlain: String
  footerHtml: String
  footerPlain: String
  createdAt: Date
  updatedAt: Date
  translations: [InputMailHeaderFooterTranslation]
  salesChannels: [InputSalesChannel]
  translated: Json
}

input InputMailHeaderFooterTranslation {
  name: String
  description: String
  headerHtml: String
  headerPlain: String
  footerHtml: String
  footerPlain: String
  mailHeaderFooterId: ID
  languageId: ID
  createdAt: Date
  updatedAt: Date
  mailHeaderFooter: InputMailHeaderFooter
  language: InputLanguage
}

input InputMailTemplate {
  id: ID
  senderMail: String
  mailType: String
  systemDefault: Boolean
  senderName: String
  description: String
  subject: String
  contentHtml: String
  contentPlain: String
  createdAt: Date
  updatedAt: Date
  translations: [InputMailTemplateTranslation]
  salesChannels: [InputSalesChannel]
  media: [InputMailTemplateMedia]
  translated: Json
}

input InputMailTemplateMedia {
  id: ID
  mailTemplateId: ID
  mediaId: ID
  position: Int
  createdAt: Date
  mailTemplate: InputMailTemplate
  media: InputMedia
}

input InputMailTemplateTranslation {
  senderName: String
  description: String
  subject: String
  contentHtml: String
  contentPlain: String
  mailTemplateId: ID
  languageId: ID
  createdAt: Date
  updatedAt: Date
  mailTemplate: InputMailTemplate
  language: InputLanguage
}

input InputMedia {
  id: ID
  userId: ID
  mediaFolderId: ID
  mimeType: String
  fileExtension: String
  uploadedAt: Date
  fileName: String
  fileSize: Int
  metaData: Json
  mediaType: Json
  createdAt: Date
  updatedAt: Date
  alt: String
  title: String
  url: String
  attributes: String
  user: InputUser
  categories: [InputCategory]
  productManufacturers: [InputProductManufacturer]
  productMedia: [InputProductMedia]
  translations: [InputMediaTranslation]
  thumbnails: [InputMediaThumbnail]
  hasFile: Boolean
  mediaFolder: InputMediaFolder
  propertyGroupOptions: [InputPropertyGroupOption]
  tags: [InputTag]
  mailTemplateMedia: [InputMailTemplateMedia]
  shippingMethods: [InputShippingMethod]
  translated: Json
}

input InputMediaFolder {
  id: ID
  useParentConfiguration: Boolean
  configurationId: ID
  defaultFolderId: ID
  parentId: ID
  parent: InputMediaFolder
  children: [InputMediaFolder]
  childCount: Int
  media: [InputMedia]
  configuration: InputMediaFolderConfiguration
  name: String
  createdAt: Date
  updatedAt: Date
  attributes: Json
}

input InputMediaFolderConfiguration {
  id: ID
  createThumbnails: Boolean
  keepAspectRatio: Boolean
  thumbnailQuality: Int
  mediaFolders: [InputMediaFolder]
  mediaThumbnailSizes: [InputMediaThumbnailSize]
  createdAt: Date
  updatedAt: Date
  attributes: Json
}

input InputMediaThumbnail {
  id: ID
  mediaId: ID
  createdAt: Date
  updatedAt: Date
  width: Int
  height: Int
  url: String
  media: InputMedia
  attributes: Json
}

input InputMediaThumbnailSize {
  id: ID
  width: Int
  height: Int
  mediaFolderConfigurations: [InputMediaFolderConfiguration]
  attributes: Json
  createdAt: Date
  updatedAt: Date
}

input InputMediaTranslation {
  title: String
  alt: String
  attributes: Json
  mediaId: ID
  languageId: ID
  createdAt: Date
  updatedAt: Date
  media: InputMedia
  language: InputLanguage
}

input InputNamed {
  id: ID
  name: String
  optionalGroupId: ID
  optionalGroup: InputNamedOptionalGroup
}

input InputNamedOptionalGroup {
  id: ID
  name: String
  nameds: [InputNamed]
}

input InputNavigation {
  id: ID
  versionId: ID
  parentId: ID
  parentVersionId: ID
  categoryId: ID
  categoryVersionId: ID
  category: InputCategory
  cmsPageId: ID
  cmsPage: InputCmsPage
  name: String
  slotConfig: String
  level: Int
  path: String
  childCount: Int
  createdAt: Date
  updatedAt: Date
  translations: [InputNavigationTranslation]
  children: [InputNavigation]
  parent: InputNavigation
  salesChannelNavigations: [InputSalesChannel]
  translated: Json
}

input InputNavigationTranslation {
  name: String
  slotConfig: Json
  navigationId: ID
  languageId: ID
  createdAt: Date
  updatedAt: Date
  navigation: InputNavigation
  language: InputLanguage
  navigationVersionId: ID
}

input InputNewsletterReceiver {
  id: ID
  email: String
  firstName: String
  lastName: String
  zipCode: String
  city: String
  street: String
  status: String
  attributes: Json
  createdAt: Date
  updatedAt: Date
  salutationId: ID
  salutation: InputSalutation
  languageId: ID
  language: InputLanguage
  salesChannelId: ID
  salesChannel: InputSalesChannel
}

input InputNumberRange {
  id: ID
  typeId: ID
  global: Boolean
  name: String
  description: String
  pattern: String
  start: Int
  createdAt: Date
  updatedAt: Date
  attributes: String
  type: InputNumberRangeType
  numberRangeSalesChannels: [InputNumberRangeSalesChannel]
  translations: [InputNumberRangeTranslation]
  translated: Json
}

input InputNumberRangeSalesChannel {
  id: ID
  numberRangeId: ID
  salesChannelId: ID
  numberRangeTypeId: ID
  numberRange: InputNumberRange
  salesChannel: InputSalesChannel
  numberRangeType: InputNumberRangeType
}

input InputNumberRangeTranslation {
  name: String
  description: String
  attributes: Json
  numberRangeId: ID
  languageId: ID
  createdAt: Date
  updatedAt: Date
  numberRange: InputNumberRange
  language: InputLanguage
}

input InputNumberRangeType {
  id: ID
  technicalName: String
  typeName: String
  global: Boolean
  attributes: String
  createdAt: Date
  updatedAt: Date
  numberRanges: [InputNumberRange]
  numberRangeSalesChannels: [InputNumberRangeSalesChannel]
  translations: [InputNumberRangeTypeTranslation]
  translated: Json
}

input InputNumberRangeTypeTranslation {
  typeName: String
  attributes: Json
  numberRangeTypeId: ID
  languageId: ID
  createdAt: Date
  updatedAt: Date
  numberRangeType: InputNumberRangeType
  language: InputLanguage
}

input InputOrder {
  id: ID
  versionId: ID
  autoIncrement: Int
  orderNumber: String
  billingAddressId: ID
  billingAddressVersionId: ID
  currencyId: ID
  salesChannelId: ID
  orderDate: Date
  price: Json
  amountTotal: Float
  amountNet: Float
  positionPrice: Float
  taxStatus: String
  shippingCosts: Json
  shippingTotal: Float
  currencyFactor: Float
  deepLinkCode: String
  stateId: ID
  stateMachineState: InputStateMachineState
  attributes: Json
  createdAt: Date
  updatedAt: Date
  currency: InputCurrency
  salesChannel: InputSalesChannel
  addresses: [InputOrderAddress]
  deliveries: [InputOrderDelivery]
  lineItems: [InputOrderLineItem]
  transactions: [InputOrderTransaction]
  documents: [InputDocument]
  tags: [InputTag]
}

input InputOrderAddress {
  id: ID
  versionId: ID
  countryId: ID
  countryStateId: ID
  orderId: ID
  orderVersionId: ID
  salutationId: ID
  firstName: String
  lastName: String
  street: String
  zipcode: String
  city: String
  company: String
  department: String
  title: String
  vatId: String
  phoneNumber: String
  additionalAddressLine1: String
  additionalAddressLine2: String
  attributes: Json
  createdAt: Date
  updatedAt: Date
  country: InputCountry
  countryState: InputCountryState
  order: InputOrder
  salutation: InputSalutation
  orderDeliveries: [InputOrderDelivery]
}

input InputOrderCustomer {
  id: ID
  versionId: ID
  customerId: ID
  orderId: ID
  orderVersionId: ID
  email: String
  salutationId: ID
  firstName: String
  lastName: String
  title: String
  customerNumber: String
  attributes: Json
  createdAt: Date
  updatedAt: Date
  customer: InputCustomer
  salutation: InputSalutation
}

input InputOrderDelivery {
  id: ID
  versionId: ID
  orderId: ID
  orderVersionId: ID
  shippingOrderAddressId: ID
  shippingOrderAddressVersionId: ID
  shippingMethodId: ID
  stateId: ID
  stateMachineState: InputStateMachineState
  trackingCode: String
  shippingDateEarliest: Date
  shippingDateLatest: Date
  shippingCosts: Json
  attributes: Json
  createdAt: Date
  updatedAt: Date
  order: InputOrder
  shippingOrderAddress: InputOrderAddress
  shippingMethod: InputShippingMethod
  positions: [InputOrderDeliveryPosition]
}

input InputOrderDeliveryPosition {
  id: ID
  versionId: ID
  orderDeliveryId: ID
  orderDeliveryVersionId: ID
  orderLineItemId: ID
  orderLineItemVersionId: ID
  price: Json
  unitPrice: Float
  totalPrice: Float
  quantity: Int
  attributes: Json
  createdAt: Date
  updatedAt: Date
  orderDelivery: InputOrderDelivery
  orderLineItem: InputOrderLineItem
}

input InputOrderLineItem {
  id: ID
  versionId: ID
  orderId: ID
  orderVersionId: ID
  parentId: ID
  parentVersionId: ID
  identifier: String
  quantity: Int
  label: String
  payload: Json
  good: Boolean
  removable: Boolean
  stackable: Boolean
  priority: Int
  price: Json
  priceDefinition: Json
  unitPrice: Float
  totalPrice: Float
  description: String
  type: String
  attributes: Json
  createdAt: Date
  updatedAt: Date
  order: InputOrder
  orderDeliveryPositions: [InputOrderDeliveryPosition]
  parent: InputOrderLineItem
  children: [InputOrderLineItem]
}

input InputOrderTransaction {
  id: ID
  versionId: ID
  orderId: ID
  orderVersionId: ID
  paymentMethodId: ID
  amount: Json
  stateId: ID
  stateMachineState: InputStateMachineState
  attributes: Json
  createdAt: Date
  updatedAt: Date
  order: InputOrder
  paymentMethod: InputPaymentMethod
}

input InputPaymentMethod {
  id: ID
  pluginId: ID
  handlerIdentifier: String
  name: String
  description: String
  position: Int
  active: Boolean
  attributes: String
  availabilityRuleIds: Json
  createdAt: Date
  updatedAt: Date
  salesChannelDefaultAssignments: [InputSalesChannel]
  plugin: InputPlugin
  customers: [InputCustomer]
  orderTransactions: [InputOrderTransaction]
  translations: [InputPaymentMethodTranslation]
  salesChannels: [InputSalesChannel]
  availabilityRules: [InputRule]
  translated: Json
}

input InputPaymentMethodTranslation {
  name: String
  description: String
  attributes: Json
  paymentMethodId: ID
  languageId: ID
  createdAt: Date
  updatedAt: Date
  paymentMethod: InputPaymentMethod
  language: InputLanguage
}

input InputPlugin {
  id: ID
  name: String
  composerName: String
  autoload: Json
  active: Boolean
  managedByComposer: Boolean
  path: String
  author: String
  copyright: String
  license: String
  version: String
  upgradeVersion: String
  installedAt: Date
  upgradedAt: Date
  icon: String
  label: String
  description: String
  manufacturerLink: String
  supportLink: String
  changelog: String
  attributes: String
  createdAt: Date
  updatedAt: Date
  translations: [InputPluginTranslation]
  paymentMethods: [InputPaymentMethod]
  translated: Json
}

input InputPluginTranslation {
  label: String
  description: String
  manufacturerLink: String
  supportLink: String
  changelog: Json
  attributes: Json
  pluginId: ID
  languageId: ID
  createdAt: Date
  updatedAt: Date
  plugin: InputPlugin
  language: InputLanguage
}

input InputProduct {
  id: ID
  versionId: ID
  parentId: ID
  parentVersionId: ID
  blacklistIds: Json
  whitelistIds: Json
  autoIncrement: Int
  active: Boolean
  stock: Int
  createdAt: Date
  updatedAt: Date
  manufacturerId: ID
  productManufacturerVersionId: ID
  unitId: ID
  taxId: ID
  coverId: ID
  productMediaVersionId: ID
  price: Json
  listingPrices: Json
  manufacturerNumber: String
  ean: String
  productNumber: String
  isCloseout: Boolean
  purchaseSteps: Int
  maxPurchase: Int
  minPurchase: Int
  purchaseUnit: Float
  referenceUnit: Float
  shippingFree: Boolean
  purchasePrice: Float
  markAsTopseller: Boolean
  weight: Float
  width: Float
  height: Float
  length: Float
  releaseDate: Date
  categoryTree: Json
  propertyIds: Json
  optionIds: Json
  minDeliveryTime: Int
  maxDeliveryTime: Int
  restockTime: Int
  tagIds: Json
  additionalText: String
  name: String
  keywords: String
  description: String
  metaTitle: String
  packUnit: String
  attributes: String
  parent: InputProduct
  children: [InputProduct]
  tax: InputTax
  manufacturer: InputProductManufacturer
  unit: InputUnit
  cover: InputProductMedia
  prices: [InputProductPrice]
  media: [InputProductMedia]
  properties: [InputPropertyGroupOption]
  categories: [InputCategory]
  tags: [InputTag]
  searchKeywords: [InputSearchDocument]
  categoriesRo: [InputCategory]
  translations: [InputProductTranslation]
  configuratorSettings: [InputProductConfiguratorSetting]
  options: [InputPropertyGroupOption]
  visibilities: [InputProductVisibility]
  translated: Json
  canonicalUrl: InputSeoUrl
  seoUrls: [InputSeoUrl]
}

input InputProductConfiguratorSetting {
  id: ID
  versionId: ID
  productId: ID
  productVersionId: ID
  optionId: ID
  price: Json
  prices: Json
  createdAt: Date
  updatedAt: Date
  product: InputProduct
  option: InputPropertyGroupOption
  attributes: Json
}

input InputProductManufacturer {
  id: ID
  versionId: ID
  mediaId: ID
  link: String
  updatedAt: Date
  createdAt: Date
  name: String
  description: String
  attributes: String
  media: InputMedia
  products: [InputProduct]
  translations: [InputProductManufacturerTranslation]
  translated: Json
}

input InputProductManufacturerTranslation {
  name: String
  description: String
  attributes: Json
  productManufacturerId: ID
  languageId: ID
  createdAt: Date
  updatedAt: Date
  productManufacturer: InputProductManufacturer
  language: InputLanguage
  productManufacturerVersionId: ID
}

input InputProductMedia {
  id: ID
  versionId: ID
  productId: ID
  productVersionId: ID
  mediaId: ID
  position: Int
  createdAt: Date
  updatedAt: Date
  product: InputProduct
  media: InputMedia
  attributes: Json
}

input InputProductPrice {
  id: ID
  versionId: ID
  productId: ID
  productVersionId: ID
  currencyId: ID
  ruleId: ID
  price: Json
  quantityStart: Int
  quantityEnd: Int
  createdAt: Date
  updatedAt: Date
  product: InputProduct
  currency: InputCurrency
  rule: InputRule
  attributes: Json
}

input InputProductStream {
  id: ID
  apiFilter: Json
  invalid: Boolean
  createdAt: Date
  updatedAt: Date
  name: String
  description: String
  attributes: String
  translations: [InputProductStreamTranslation]
  filters: [InputProductStreamFilter]
  translated: Json
}

input InputProductStreamFilter {
  id: ID
  productStreamId: ID
  parentId: ID
  type: String
  field: String
  operator: String
  value: String
  parameters: Json
  position: Int
  createdAt: Date
  updatedAt: Date
  productStream: InputProductStream
  parent: InputProductStreamFilter
  queries: [InputProductStreamFilter]
  attributes: Json
}

input InputProductStreamTranslation {
  name: String
  description: String
  attributes: Json
  productStreamId: ID
  languageId: ID
  createdAt: Date
  updatedAt: Date
  productStream: InputProductStream
  language: InputLanguage
}

input InputProductTranslation {
  additionalText: String
  name: String
  keywords: String
  description: String
  metaTitle: String
  packUnit: String
  attributes: Json
  productId: ID
  languageId: ID
  createdAt: Date
  updatedAt: Date
  product: InputProduct
  language: InputLanguage
  productVersionId: ID
}

input InputProductVisibility {
  id: ID
  productId: ID
  productVersionId: ID
  salesChannelId: ID
  visibility: Int
  salesChannel: InputSalesChannel
  product: InputProduct
  createdAt: Date
  updatedAt: Date
}

input InputPromotion {
  id: ID
  name: String
  active: Boolean
  value: Float
  percental: Boolean
  validFrom: Date
  validUntil: Date
  redeemable: Int
  exclusive: Boolean
  priority: Int
  excludeLowerPriority: Boolean
  personaRuleId: ID
  personaRule: InputRule
  scopeRuleId: ID
  scopeRule: InputRule
  discountRuleId: ID
  discountRule: InputRule
  codeType: String
  code: String
  promotionSalesChannels: [InputPromotionSalesChannel]
  discounts: [InputPromotionDiscount]
}

input InputPromotionDiscount {
  id: ID
  promotionId: ID
  type: String
  value: Float
  graduated: Boolean
  graduationStep: Int
  graduationOrder: String
  promotion: InputPromotion
  applyTowards: String
}

input InputPromotionSalesChannel {
  promotionId: ID
  salesChannelId: ID
  createdAt: Date
  updatedAt: Date
  priority: Int
  promotion: InputPromotion
  salesChannel: InputSalesChannel
}

input InputPropertyGroup {
  id: ID
  name: String
  description: String
  displayType: String
  sortingType: String
  attributes: String
  createdAt: Date
  updatedAt: Date
  options: [InputPropertyGroupOption]
  translations: [InputPropertyGroupTranslation]
  translated: Json
}

input InputPropertyGroupOption {
  id: ID
  groupId: ID
  name: String
  position: String
  colorHexCode: String
  mediaId: ID
  attributes: String
  createdAt: Date
  updatedAt: Date
  media: InputMedia
  group: InputPropertyGroup
  translations: [InputPropertyGroupOptionTranslation]
  productConfiguratorSettings: [InputProductConfiguratorSetting]
  productProperties: [InputProduct]
  productOptions: [InputProduct]
  translated: Json
}

input InputPropertyGroupOptionTranslation {
  name: String
  position: Int
  attributes: Json
  propertyGroupOptionId: ID
  languageId: ID
  createdAt: Date
  updatedAt: Date
  propertyGroupOption: InputPropertyGroupOption
  language: InputLanguage
}

input InputPropertyGroupTranslation {
  name: String
  description: String
  attributes: Json
  propertyGroupId: ID
  languageId: ID
  createdAt: Date
  updatedAt: Date
  propertyGroup: InputPropertyGroup
  language: InputLanguage
}

input InputRootSub {
  id: ID
  versionId: ID
  name: String
  stock: Int
  rootId: ID
  rootVersionId: ID
  manies: [InputRootSubMany]
}

input InputRootSubMany {
  id: ID
  versionId: ID
  name: String
  subId: ID
  rootSubVersionId: ID
  sub: InputRootSub
}

input InputRule {
  id: ID
  name: String
  priority: Int
  description: String
  invalid: Boolean
  attributes: Json
  createdAt: Date
  updatedAt: Date
  moduleTypes: Json
  conditions: [InputRuleCondition]
  discountSurcharges: [InputDiscountSurcharge]
  productPrices: [InputProductPrice]
  shippingMethodPrices: [InputShippingMethodPrice]
  shippingMethodPriceCalculations: [InputShippingMethodPrice]
  shippingMethods: [InputShippingMethod]
  paymentMethods: [InputPaymentMethod]
  personaPromotions: [InputPromotion]
  scopePromotions: [InputPromotion]
  discountPromotions: [InputPromotion]
}

input InputRuleCondition {
  id: ID
  type: String
  ruleId: ID
  parentId: ID
  value: Json
  position: Int
  rule: InputRule
  parent: InputRuleCondition
  children: [InputRuleCondition]
  attributes: Json
}

input InputSalesChannel {
  id: ID
  typeId: ID
  languageId: ID
  customerGroupId: ID
  currencyId: ID
  paymentMethodId: ID
  shippingMethodId: ID
  countryId: ID
  navigationId: ID
  navigationVersionId: ID
  mailHeaderFooterId: ID
  type: InputSalesChannelType
  name: String
  shortName: String
  accessKey: String
  configuration: Json
  active: Boolean
  taxCalculationType: String
  attributes: String
  createdAt: Date
  updatedAt: Date
  translations: [InputSalesChannelTranslation]
  currencies: [InputCurrency]
  languages: [InputLanguage]
  countries: [InputCountry]
  paymentMethods: [InputPaymentMethod]
  shippingMethods: [InputShippingMethod]
  language: InputLanguage
  customerGroup: InputCustomerGroup
  currency: InputCurrency
  paymentMethod: InputPaymentMethod
  shippingMethod: InputShippingMethod
  country: InputCountry
  orders: [InputOrder]
  customers: [InputCustomer]
  domains: [InputSalesChannelDomain]
  systemConfigs: [InputSystemConfig]
  navigation: InputNavigation
  productVisibilities: [InputProductVisibility]
  mailHeaderFooter: InputMailHeaderFooter
  newsletterReceivers: [InputNewsletterReceiver]
  mailTemplates: [InputMailTemplate]
  numberRangeSalesChannels: [InputNumberRangeSalesChannel]
  promotionSalesChannels: [InputPromotionSalesChannel]
  translated: Json
  seoUrls: [InputSeoUrl]
  seoUrlTemplates: [InputSeoUrlTemplate]
}

input InputSalesChannelDomain {
  id: ID
  url: String
  salesChannelId: ID
  languageId: ID
  currencyId: ID
  snippetSetId: ID
  createdAt: Date
  updatedAt: Date
  salesChannel: InputSalesChannel
  language: InputLanguage
  currency: InputCurrency
  snippetSet: InputSnippetSet
  attributes: Json
}

input InputSalesChannelTranslation {
  name: String
  attributes: Json
  salesChannelId: ID
  languageId: ID
  createdAt: Date
  updatedAt: Date
  salesChannel: InputSalesChannel
  language: InputLanguage
}

input InputSalesChannelType {
  id: ID
  coverUrl: String
  iconName: String
  screenshotUrls: Json
  name: String
  manufacturer: String
  description: String
  descriptionLong: String
  attributes: String
  createdAt: Date
  updatedAt: Date
  translations: [InputSalesChannelTypeTranslation]
  salesChannels: [InputSalesChannel]
  translated: Json
}

input InputSalesChannelTypeTranslation {
  name: String
  manufacturer: String
  description: String
  descriptionLong: String
  attributes: Json
  salesChannelTypeId: ID
  languageId: ID
  createdAt: Date
  updatedAt: Date
  salesChannelType: InputSalesChannelType
  language: InputLanguage
}

input InputSalutation {
  id: ID
  salutationKey: String
  displayName: String
  letterName: String
  createdAt: Date
  updatedAt: Date
  translations: [InputSalutationTranslation]
  customers: [InputCustomer]
  customerAddresses: [InputCustomerAddress]
  orderCustomers: [InputOrderCustomer]
  orderAddresses: [InputOrderAddress]
  newsletterReceivers: [InputNewsletterReceiver]
  translated: Json
}

input InputSalutationTranslation {
  displayName: String
  letterName: String
  salutationId: ID
  languageId: ID
  createdAt: Date
  updatedAt: Date
  salutation: InputSalutation
  language: InputLanguage
}

input InputScheduledTask {
  id: ID
  name: String
  scheduledTaskClass: String
  runInterval: Int
  status: String
  lastExecutionTime: Date
  nextExecutionTime: Date
  deadMessages: [InputDeadMessage]
}

input InputSearchDocument {
  id: ID
  languageId: ID
  entityId: ID
  entity: String
  keyword: String
  ranking: Float
  attributes: Json
  language: InputLanguage
}

input InputSeoUrl {
  id: ID
  salesChannelId: ID
  foreignKey: ID
  routeName: String
  pathInfo: String
  seoPathInfo: String
  isCanonical: Boolean
  isModified: Boolean
  isDeleted: Boolean
  isValid: Boolean
  autoIncrement: Int
  attributes: Json
  createdAt: Date
  updatedAt: Date
  salesChannel: InputSalesChannel
  url: String
}

input InputSeoUrlTemplate {
  id: ID
  salesChannelId: ID
  entityName: String
  routeName: String
  template: String
  isValid: Boolean
  createdAt: Date
  updatedAt: Date
  attributes: Json
  salesChannel: InputSalesChannel
}

input InputShippingMethod {
  id: ID
  bindShippingfree: Boolean
  name: String
  active: Boolean
  shippingFree: Float
  attributes: String
  availabilityRuleId: ID
  mediaId: ID
  createdAt: Date
  updatedAt: Date
  deliveryTimeId: ID
  deliveryTime: InputDeliveryTime
  salesChannelDefaultAssignments: [InputSalesChannel]
  description: String
  orderDeliveries: [InputOrderDelivery]
  translations: [InputShippingMethodTranslation]
  salesChannels: [InputSalesChannel]
  availabilityRule: InputRule
  prices: [InputShippingMethodPrice]
  media: InputMedia
  tags: [InputTag]
  translated: Json
}

input InputShippingMethodPrice {
  id: ID
  shippingMethodId: ID
  currencyId: ID
  ruleId: ID
  calculation: Int
  calculationRuleId: ID
  quantityStart: Float
  quantityEnd: Float
  price: Float
  attributes: Json
  createdAt: Date
  updatedAt: Date
  shippingMethod: InputShippingMethod
  currency: InputCurrency
  rule: InputRule
  calculationRule: InputRule
}

input InputShippingMethodTranslation {
  name: String
  description: String
  attributes: Json
  shippingMethodId: ID
  languageId: ID
  createdAt: Date
  updatedAt: Date
  shippingMethod: InputShippingMethod
  language: InputLanguage
}

input InputSnippet {
  id: ID
  setId: ID
  translationKey: String
  value: String
  author: String
  attributes: Json
  createdAt: Date
  updatedAt: Date
  set: InputSnippetSet
}

input InputSnippetSet {
  id: ID
  name: String
  baseFile: String
  iso: String
  attributes: Json
  createdAt: Date
  updatedAt: Date
  snippets: [InputSnippet]
  salesChannelDomains: [InputSalesChannelDomain]
}

input InputStateMachine {
  id: ID
  technicalName: String
  name: String
  attributes: String
  states: [InputStateMachineState]
  transitions: [InputStateMachineTransition]
  initialStateId: ID
  translations: [InputStateMachineTranslation]
  createdAt: Date
  updatedAt: Date
  historyEntries: [InputStateMachineHistory]
  translated: Json
}

input InputStateMachineHistory {
  id: ID
  stateMachineId: ID
  stateMachine: InputStateMachine
  entityName: String
  entityId: Json
  fromStateId: ID
  fromStateMachineState: InputStateMachineState
  toStateId: ID
  toStateMachineState: InputStateMachineState
  transitionActionName: String
  userId: ID
  user: InputUser
  createdAt: Date
}

input InputStateMachineState {
  id: ID
  technicalName: String
  name: String
  stateMachineId: ID
  stateMachine: InputStateMachine
  fromStateMachineTransitions: [InputStateMachineTransition]
  toStateMachineTransitions: [InputStateMachineTransition]
  translations: [InputStateMachineStateTranslation]
  orderTransactions: [InputOrderTransaction]
  orderDeliveries: [InputOrderDelivery]
  orders: [InputOrder]
  attributes: String
  createdAt: Date
  updatedAt: Date
  toStateMachineHistoryEntries: [InputStateMachineHistory]
  fromStateMachineHistoryEntries: [InputStateMachineHistory]
  translated: Json
}

input InputStateMachineStateTranslation {
  name: String
  attributes: Json
  stateMachineStateId: ID
  languageId: ID
  createdAt: Date
  updatedAt: Date
  stateMachineState: InputStateMachineState
  language: InputLanguage
}

input InputStateMachineTransition {
  id: ID
  actionName: String
  stateMachineId: ID
  stateMachine: InputStateMachine
  fromStateId: ID
  fromStateMachineState: InputStateMachineState
  toStateId: ID
  toStateMachineState: InputStateMachineState
  createdAt: Date
  updatedAt: Date
  attributes: Json
}

input InputStateMachineTranslation {
  name: String
  attributes: Json
  stateMachineId: ID
  languageId: ID
  createdAt: Date
  updatedAt: Date
  stateMachine: InputStateMachine
  language: InputLanguage
}

input InputSystemConfig {
  id: ID
  namespace: String
  configurationKey: String
  configurationValue: String
  createdAt: Date
  updatedAt: Date
  salesChannelId: ID
  salesChannel: InputSalesChannel
}

input InputTag {
  id: ID
  name: String
  createdAt: Date
  updatedAt: Date
  products: [InputProduct]
  media: [InputMedia]
  categories: [InputCategory]
  customers: [InputCustomer]
  orders: [InputOrder]
  shippingMethods: [InputShippingMethod]
}

input InputTax {
  id: ID
  taxRate: Float
  name: String
  attributes: Json
  createdAt: Date
  updatedAt: Date
  products: [InputProduct]
}

input InputUnit {
  id: ID
  shortCode: String
  name: String
  attributes: String
  createdAt: Date
  updatedAt: Date
  products: [InputProduct]
  translations: [InputUnitTranslation]
  translated: Json
}

input InputUnitTranslation {
  shortCode: String
  name: String
  attributes: Json
  unitId: ID
  languageId: ID
  createdAt: Date
  updatedAt: Date
  unit: InputUnit
  language: InputLanguage
}

input InputUser {
  id: ID
  localeId: ID
  avatarId: ID
  username: String
  firstName: String
  lastName: String
  email: String
  active: Boolean
  attributes: Json
  createdAt: Date
  updatedAt: Date
  locale: InputLocale
  media: [InputMedia]
  accessKeys: [InputUserAccessKey]
  stateMachineHistoryEntries: [InputStateMachineHistory]
  storeToken: String
}

input InputUserAccessKey {
  id: ID
  userId: ID
  accessKey: String
  writeAccess: Boolean
  lastUsageAt: Date
  attributes: Json
  createdAt: Date
  user: InputUser
}

input InputVersion {
  id: ID
  name: String
  createdAt: Date
  updatedAt: Date
  commits: [InputVersionCommit]
}

input InputVersionCommit {
  id: ID
  versionId: ID
  userId: ID
  integrationId: ID
  autoIncrement: Int
  isMerge: Boolean
  message: String
  createdAt: Date
  data: [InputVersionCommitData]
  version: InputVersion
}

input InputVersionCommitData {
  id: ID
  versionCommitId: ID
  commit: InputVersionCommit
  userId: ID
  integrationId: ID
  autoIncrement: Int
  entityName: String
  entityId: Json
  action: String
  payload: Json
  createdAt: Date
}

type Integration {
  id: ID!
  label: String!
  accessKey: String!
  writeAccess: Boolean
  lastUsageAt: Date
  attributes: Json
  createdAt: Date!
  updatedAt: Date!
}

type IntegrationAccessKey {
  accessKey: ID!
  secretAccessKey: ID!
}

"""The Result for a search that returns multiple Items"""
type IntegrationConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [IntegrationEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

"""Contains the information for one Edge"""
type IntegrationEdge {
  """The Node of the Edge that contains the real element"""
  node: Integration

  """The cursor to the Item of the Edge"""
  cursor: ID
}

scalar Json

type KeyPair {
  accessKey: ID!
  secretAccessKey: ID!
}

type Language {
  id: ID!
  parentId: ID
  localeId: ID!
  translationCodeId: ID
  name: String!
  attributes: Json
  createdAt: Date!
  updatedAt: Date!
  parent: Language
  locale: Locale
  translationCode: Locale
  children(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): LanguageConnection
  salesChannels(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): SalesChannelConnection
  salesChannelDefaultAssignments(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): SalesChannelConnection
  salesChannelDomains(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): SalesChannelDomainConnection
  customers(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): CustomerConnection
  newsletterReceivers(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): NewsletterReceiverConnection
  categoryTranslations(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): CategoryTranslationConnection
  countryStateTranslations(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): CountryStateTranslationConnection
  countryTranslations(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): CountryTranslationConnection
  currencyTranslations(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): CurrencyTranslationConnection
  customerGroupTranslations(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): CustomerGroupTranslationConnection
  localeTranslations(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): LocaleTranslationConnection
  mediaTranslations(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): MediaTranslationConnection
  paymentMethodTranslations(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): PaymentMethodTranslationConnection
  productManufacturerTranslations(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): ProductManufacturerTranslationConnection
  productTranslations(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): ProductTranslationConnection
  shippingMethodTranslations(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): ShippingMethodTranslationConnection
  unitTranslations(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): UnitTranslationConnection
  propertyGroupTranslations(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): PropertyGroupTranslationConnection
  propertyGroupOptionTranslations(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): PropertyGroupOptionTranslationConnection
  discountSurchargeTranslations(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): DiscountSurchargeTranslationConnection
  salesChannelTranslations(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): SalesChannelTranslationConnection
  salesChannelTypeTranslations(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): SalesChannelTypeTranslationConnection
  salutationTranslations(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): SalutationTranslationConnection
  searchDocuments(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): SearchDocumentConnection
  pluginTranslations(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): PluginTranslationConnection
  productStreamTranslations(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): ProductStreamTranslationConnection
  stateMachineTranslations(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): StateMachineTranslationConnection
  stateMachineStateTranslations(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): StateMachineStateTranslationConnection
  cmsPageTranslations(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): CmsPageTranslationConnection
  cmsSlotTranslations(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): CmsSlotTranslationConnection
  navigationTranslations(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): NavigationTranslationConnection
  mailTemplateTranslations(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): MailTemplateTranslationConnection
  mailHeaderFooterTranslations(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): MailHeaderFooterTranslationConnection
  numberRangeTypeTranslations(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): NumberRangeTypeTranslationConnection
  deliveryTimeTranslations(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): DeliveryTimeTranslationConnection
}

"""The Result for a search that returns multiple Items"""
type LanguageConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [LanguageEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

"""Contains the information for one Edge"""
type LanguageEdge {
  """The Node of the Edge that contains the real element"""
  node: Language

  """The cursor to the Item of the Edge"""
  cursor: ID
}

type Locale {
  id: ID!
  code: String!
  name: String
  territory: String
  attributes: String
  createdAt: Date!
  updatedAt: Date!
  languages(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): LanguageConnection
  translations: LocaleTranslationConnection!
  users(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): UserConnection
  translated: Json
}

"""The Result for a search that returns multiple Items"""
type LocaleConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [LocaleEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

"""Contains the information for one Edge"""
type LocaleEdge {
  """The Node of the Edge that contains the real element"""
  node: Locale

  """The cursor to the Item of the Edge"""
  cursor: ID
}

type LocaleTranslation {
  name: String!
  territory: String!
  attributes: Json
  localeId: ID!
  languageId: ID!
  createdAt: Date!
  updatedAt: Date!
  locale: Locale
  language: Language
}

"""The Result for a search that returns multiple Items"""
type LocaleTranslationConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [LocaleTranslationEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

"""Contains the information for one Edge"""
type LocaleTranslationEdge {
  """The Node of the Edge that contains the real element"""
  node: LocaleTranslation

  """The cursor to the Item of the Edge"""
  cursor: ID
}

type MailHeaderFooter {
  id: ID!
  systemDefault: Boolean
  name: String
  description: String
  headerHtml: String
  headerPlain: String
  footerHtml: String
  footerPlain: String
  createdAt: Date!
  updatedAt: Date!
  translations: MailHeaderFooterTranslationConnection!
  salesChannels(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): SalesChannelConnection
  translated: Json
}

"""The Result for a search that returns multiple Items"""
type MailHeaderFooterConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [MailHeaderFooterEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

"""Contains the information for one Edge"""
type MailHeaderFooterEdge {
  """The Node of the Edge that contains the real element"""
  node: MailHeaderFooter

  """The cursor to the Item of the Edge"""
  cursor: ID
}

type MailHeaderFooterTranslation {
  name: String
  description: String
  headerHtml: String
  headerPlain: String
  footerHtml: String
  footerPlain: String
  mailHeaderFooterId: ID!
  languageId: ID!
  createdAt: Date!
  updatedAt: Date!
  mailHeaderFooter: MailHeaderFooter
  language: Language
}

"""The Result for a search that returns multiple Items"""
type MailHeaderFooterTranslationConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [MailHeaderFooterTranslationEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

"""Contains the information for one Edge"""
type MailHeaderFooterTranslationEdge {
  """The Node of the Edge that contains the real element"""
  node: MailHeaderFooterTranslation

  """The cursor to the Item of the Edge"""
  cursor: ID
}

type MailTemplate {
  id: ID!
  senderMail: String!
  mailType: String
  systemDefault: Boolean
  senderName: String
  description: String
  subject: String
  contentHtml: String
  contentPlain: String
  createdAt: Date!
  updatedAt: Date!
  translations: MailTemplateTranslationConnection!
  salesChannels(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): SalesChannelConnection
  media(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): MailTemplateMediaConnection
  translated: Json
}

"""The Result for a search that returns multiple Items"""
type MailTemplateConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [MailTemplateEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

"""Contains the information for one Edge"""
type MailTemplateEdge {
  """The Node of the Edge that contains the real element"""
  node: MailTemplate

  """The cursor to the Item of the Edge"""
  cursor: ID
}

type MailTemplateMedia {
  id: ID!
  mailTemplateId: ID!
  mediaId: ID!
  position: Int
  createdAt: Date!
  mailTemplate: MailTemplate
  media: Media
}

"""The Result for a search that returns multiple Items"""
type MailTemplateMediaConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [MailTemplateMediaEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

"""Contains the information for one Edge"""
type MailTemplateMediaEdge {
  """The Node of the Edge that contains the real element"""
  node: MailTemplateMedia

  """The cursor to the Item of the Edge"""
  cursor: ID
}

type MailTemplateTranslation {
  senderName: String
  description: String
  subject: String
  contentHtml: String
  contentPlain: String
  mailTemplateId: ID!
  languageId: ID!
  createdAt: Date!
  updatedAt: Date!
  mailTemplate: MailTemplate
  language: Language
}

"""The Result for a search that returns multiple Items"""
type MailTemplateTranslationConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [MailTemplateTranslationEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

"""Contains the information for one Edge"""
type MailTemplateTranslationEdge {
  """The Node of the Edge that contains the real element"""
  node: MailTemplateTranslation

  """The cursor to the Item of the Edge"""
  cursor: ID
}

type Media {
  id: ID!
  userId: ID
  mediaFolderId: ID
  mimeType: String
  fileExtension: String
  uploadedAt: Date
  fileName: String
  fileSize: Int
  metaData: Json
  mediaType: Json
  createdAt: Date!
  updatedAt: Date!
  alt: String
  title: String
  url: String
  attributes: String
  user: User
  categories(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): CategoryConnection
  productManufacturers(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): ProductManufacturerConnection
  productMedia(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): ProductMediaConnection
  translations: MediaTranslationConnection!
  thumbnails(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): MediaThumbnailConnection
  hasFile: Boolean
  mediaFolder: MediaFolder
  propertyGroupOptions(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): PropertyGroupOptionConnection
  tags(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): TagConnection
  mailTemplateMedia(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): MailTemplateMediaConnection
  shippingMethods(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): ShippingMethodConnection
  translated: Json
}

"""The Result for a search that returns multiple Items"""
type MediaConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [MediaEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

type MediaDefaultFolder {
  id: ID!
  associationFields: Json!
  entity: String!
  createdAt: Date!
  updatedAt: Date!
  attributes: Json
}

"""The Result for a search that returns multiple Items"""
type MediaDefaultFolderConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [MediaDefaultFolderEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

"""Contains the information for one Edge"""
type MediaDefaultFolderEdge {
  """The Node of the Edge that contains the real element"""
  node: MediaDefaultFolder

  """The cursor to the Item of the Edge"""
  cursor: ID
}

"""Contains the information for one Edge"""
type MediaEdge {
  """The Node of the Edge that contains the real element"""
  node: Media

  """The cursor to the Item of the Edge"""
  cursor: ID
}

type MediaFolder {
  id: ID!
  useParentConfiguration: Boolean
  configurationId: ID!
  defaultFolderId: ID
  parentId: ID
  parent: MediaFolder
  children(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): MediaFolderConnection
  childCount: Int
  media(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): MediaConnection
  configuration: MediaFolderConfiguration
  name: String!
  createdAt: Date!
  updatedAt: Date!
  attributes: Json
}

type MediaFolderConfiguration {
  id: ID!
  createThumbnails: Boolean
  keepAspectRatio: Boolean
  thumbnailQuality: Int
  mediaFolders(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): MediaFolderConnection
  mediaThumbnailSizes(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): MediaThumbnailSizeConnection
  createdAt: Date!
  updatedAt: Date!
  attributes: Json
}

"""The Result for a search that returns multiple Items"""
type MediaFolderConfigurationConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [MediaFolderConfigurationEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

"""Contains the information for one Edge"""
type MediaFolderConfigurationEdge {
  """The Node of the Edge that contains the real element"""
  node: MediaFolderConfiguration

  """The cursor to the Item of the Edge"""
  cursor: ID
}

"""The Result for a search that returns multiple Items"""
type MediaFolderConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [MediaFolderEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

"""Contains the information for one Edge"""
type MediaFolderEdge {
  """The Node of the Edge that contains the real element"""
  node: MediaFolder

  """The cursor to the Item of the Edge"""
  cursor: ID
}

type MediaThumbnail {
  id: ID!
  mediaId: ID!
  createdAt: Date!
  updatedAt: Date!
  width: Int!
  height: Int!
  url: String
  media: Media
  attributes: Json
}

"""The Result for a search that returns multiple Items"""
type MediaThumbnailConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [MediaThumbnailEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

"""Contains the information for one Edge"""
type MediaThumbnailEdge {
  """The Node of the Edge that contains the real element"""
  node: MediaThumbnail

  """The cursor to the Item of the Edge"""
  cursor: ID
}

type MediaThumbnailSize {
  id: ID!
  width: Int!
  height: Int!
  mediaFolderConfigurations(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): MediaFolderConfigurationConnection
  attributes: Json
  createdAt: Date!
  updatedAt: Date!
}

"""The Result for a search that returns multiple Items"""
type MediaThumbnailSizeConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [MediaThumbnailSizeEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

"""Contains the information for one Edge"""
type MediaThumbnailSizeEdge {
  """The Node of the Edge that contains the real element"""
  node: MediaThumbnailSize

  """The cursor to the Item of the Edge"""
  cursor: ID
}

type MediaTranslation {
  title: String
  alt: String
  attributes: Json
  mediaId: ID!
  languageId: ID!
  createdAt: Date!
  updatedAt: Date!
  media: Media
  language: Language
}

"""The Result for a search that returns multiple Items"""
type MediaTranslationConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [MediaTranslationEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

"""Contains the information for one Edge"""
type MediaTranslationEdge {
  """The Node of the Edge that contains the real element"""
  node: MediaTranslation

  """The cursor to the Item of the Edge"""
  cursor: ID
}

type MessageQueueStats {
  id: ID!
  name: String!
  size: Int!
}

"""The Result for a search that returns multiple Items"""
type MessageQueueStatsConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [MessageQueueStatsEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

"""Contains the information for one Edge"""
type MessageQueueStatsEdge {
  """The Node of the Edge that contains the real element"""
  node: MessageQueueStats

  """The cursor to the Item of the Edge"""
  cursor: ID
}

type Mutation {
  createAttribute(id: ID, name: String!, type: String!, config: Json, attributeSetId: ID, attributeSet: InputAttributeSet, createdAt: Date, updatedAt: Date): Attribute
  updateAttribute(id: ID!, name: String, type: String, config: Json, attributeSetId: ID, attributeSet: InputAttributeSet, createdAt: Date, updatedAt: Date): Attribute
  deleteAttribute(id: ID!): ID
  createAttributeSet(id: ID, name: String!, config: Json, attributes: [InputAttribute], relations: [InputAttributeSetRelation], createdAt: Date, updatedAt: Date): AttributeSet
  updateAttributeSet(id: ID!, name: String, config: Json, attributes: [InputAttribute], relations: [InputAttributeSetRelation], createdAt: Date, updatedAt: Date): AttributeSet
  deleteAttributeSet(id: ID!): ID
  createAttributeSetRelation(id: ID, attributeSetId: ID, entityName: String!, attributeSet: InputAttributeSet, createdAt: Date, updatedAt: Date): AttributeSetRelation
  updateAttributeSetRelation(id: ID!, attributeSetId: ID, entityName: String, attributeSet: InputAttributeSet, createdAt: Date, updatedAt: Date): AttributeSetRelation
  deleteAttributeSetRelation(id: ID!): ID
  createVersion(id: ID, name: String! = "Draft 2019-04-10 16:24:55.000", createdAt: Date = "2019-04-10T16:24:55+02:00", updatedAt: Date, commits: [InputVersionCommit]): Version
  updateVersion(id: ID!, name: String, createdAt: Date, updatedAt: Date, commits: [InputVersionCommit]): Version
  deleteVersion(id: ID!): ID
  createVersionCommit(id: ID, versionId: ID, userId: ID, integrationId: ID, autoIncrement: Int, isMerge: Boolean, message: String, createdAt: Date = "2019-04-10T16:24:55+02:00", data: [InputVersionCommitData], version: InputVersion): VersionCommit
  updateVersionCommit(id: ID!, versionId: ID, userId: ID, integrationId: ID, autoIncrement: Int, isMerge: Boolean, message: String, createdAt: Date, data: [InputVersionCommitData], version: InputVersion): VersionCommit
  deleteVersionCommit(id: ID!): ID
  createVersionCommitData(id: ID, versionCommitId: ID, commit: InputVersionCommit, userId: ID, integrationId: ID, autoIncrement: Int, entityName: String!, entityId: Json!, action: String!, payload: Json!, createdAt: Date): VersionCommitData
  updateVersionCommitData(id: ID!, versionCommitId: ID, commit: InputVersionCommit, userId: ID, integrationId: ID, autoIncrement: Int, entityName: String, entityId: Json, action: String, payload: Json, createdAt: Date): VersionCommitData
  deleteVersionCommitData(id: ID!): ID
  createEventAction(id: ID, eventName: String!, actionName: String!, config: Json, createdAt: Date, updatedAt: Date): EventAction
  updateEventAction(id: ID!, eventName: String, actionName: String, config: Json, createdAt: Date, updatedAt: Date): EventAction
  deleteEventAction(id: ID!): ID
  createDeadMessage(id: ID, originalMessageClass: String!, handlerClass: String!, encrypted: Boolean! = false, errorCount: Int! = 1, nextExecutionTime: Date!, exception: String!, exceptionMessage: String!, exceptionFile: String!, exceptionLine: Int!, scheduledTaskId: ID, createdAt: Date, updatedAt: Date, scheduledTask: InputScheduledTask): DeadMessage
  updateDeadMessage(id: ID!, originalMessageClass: String, handlerClass: String, encrypted: Boolean, errorCount: Int, nextExecutionTime: Date, exception: String, exceptionMessage: String, exceptionFile: String, exceptionLine: Int, scheduledTaskId: ID, createdAt: Date, updatedAt: Date, scheduledTask: InputScheduledTask): DeadMessage
  deleteDeadMessage(id: ID!): ID
  createMessageQueueStats(id: ID, name: String!, size: Int! = 0): MessageQueueStats
  updateMessageQueueStats(id: ID!, name: String, size: Int): MessageQueueStats
  deleteMessageQueueStats(id: ID!): ID
  createPlugin(id: ID, name: String!, composerName: String, autoload: Json!, active: Boolean, managedByComposer: Boolean, path: String, author: String, copyright: String, license: String, version: String!, upgradeVersion: String, installedAt: Date, upgradedAt: Date, icon: String, label: String, description: String, manufacturerLink: String, supportLink: String, changelog: String, attributes: String, createdAt: Date, updatedAt: Date, translations: [InputPluginTranslation], paymentMethods: [InputPaymentMethod], translated: Json): Plugin
  updatePlugin(id: ID!, name: String, composerName: String, autoload: Json, active: Boolean, managedByComposer: Boolean, path: String, author: String, copyright: String, license: String, version: String, upgradeVersion: String, installedAt: Date, upgradedAt: Date, icon: String, label: String, description: String, manufacturerLink: String, supportLink: String, changelog: String, attributes: String, createdAt: Date, updatedAt: Date, translations: [InputPluginTranslation], paymentMethods: [InputPaymentMethod], translated: Json): Plugin
  deletePlugin(id: ID!): ID
  createScheduledTask(id: ID, name: String!, scheduledTaskClass: String!, runInterval: Int!, status: String!, lastExecutionTime: Date, nextExecutionTime: Date! = "2019-04-10T16:24:55+02:00", deadMessages: [InputDeadMessage]): ScheduledTask
  updateScheduledTask(id: ID!, name: String, scheduledTaskClass: String, runInterval: Int, status: String, lastExecutionTime: Date, nextExecutionTime: Date, deadMessages: [InputDeadMessage]): ScheduledTask
  deleteScheduledTask(id: ID!): ID
  createTag(id: ID, name: String!, createdAt: Date, updatedAt: Date, products: [InputProduct], media: [InputMedia], categories: [InputCategory], customers: [InputCustomer], orders: [InputOrder], shippingMethods: [InputShippingMethod]): Tag
  updateTag(id: ID!, name: String, createdAt: Date, updatedAt: Date, products: [InputProduct], media: [InputMedia], categories: [InputCategory], customers: [InputCustomer], orders: [InputOrder], shippingMethods: [InputShippingMethod]): Tag
  deleteTag(id: ID!): ID
  createStoreSettings(id: ID, key: String, value: String): StoreSettings
  updateStoreSettings(id: ID!, key: String, value: String): StoreSettings
  deleteStoreSettings(id: ID!): ID
  createLanguage(id: ID, parentId: ID, localeId: ID, translationCodeId: ID, name: String!, attributes: Json, createdAt: Date, updatedAt: Date, parent: InputLanguage, locale: InputLocale, translationCode: InputLocale, children: [InputLanguage], salesChannels: [InputSalesChannel], salesChannelDefaultAssignments: [InputSalesChannel], salesChannelDomains: [InputSalesChannelDomain], customers: [InputCustomer], newsletterReceivers: [InputNewsletterReceiver], categoryTranslations: [InputCategoryTranslation], countryStateTranslations: [InputCountryStateTranslation], countryTranslations: [InputCountryTranslation], currencyTranslations: [InputCurrencyTranslation], customerGroupTranslations: [InputCustomerGroupTranslation], localeTranslations: [InputLocaleTranslation], mediaTranslations: [InputMediaTranslation], paymentMethodTranslations: [InputPaymentMethodTranslation], productManufacturerTranslations: [InputProductManufacturerTranslation], productTranslations: [InputProductTranslation], shippingMethodTranslations: [InputShippingMethodTranslation], unitTranslations: [InputUnitTranslation], propertyGroupTranslations: [InputPropertyGroupTranslation], propertyGroupOptionTranslations: [InputPropertyGroupOptionTranslation], discountSurchargeTranslations: [InputDiscountSurchargeTranslation], salesChannelTranslations: [InputSalesChannelTranslation], salesChannelTypeTranslations: [InputSalesChannelTypeTranslation], salutationTranslations: [InputSalutationTranslation], searchDocuments: [InputSearchDocument], pluginTranslations: [InputPluginTranslation], productStreamTranslations: [InputProductStreamTranslation], stateMachineTranslations: [InputStateMachineTranslation], stateMachineStateTranslations: [InputStateMachineStateTranslation], cmsPageTranslations: [InputCmsPageTranslation], cmsSlotTranslations: [InputCmsSlotTranslation], navigationTranslations: [InputNavigationTranslation], mailTemplateTranslations: [InputMailTemplateTranslation], mailHeaderFooterTranslations: [InputMailHeaderFooterTranslation], numberRangeTypeTranslations: [InputNumberRangeTypeTranslation], deliveryTimeTranslations: [InputDeliveryTimeTranslation]): Language
  updateLanguage(id: ID!, parentId: ID, localeId: ID, translationCodeId: ID, name: String, attributes: Json, createdAt: Date, updatedAt: Date, parent: InputLanguage, locale: InputLocale, translationCode: InputLocale, children: [InputLanguage], salesChannels: [InputSalesChannel], salesChannelDefaultAssignments: [InputSalesChannel], salesChannelDomains: [InputSalesChannelDomain], customers: [InputCustomer], newsletterReceivers: [InputNewsletterReceiver], categoryTranslations: [InputCategoryTranslation], countryStateTranslations: [InputCountryStateTranslation], countryTranslations: [InputCountryTranslation], currencyTranslations: [InputCurrencyTranslation], customerGroupTranslations: [InputCustomerGroupTranslation], localeTranslations: [InputLocaleTranslation], mediaTranslations: [InputMediaTranslation], paymentMethodTranslations: [InputPaymentMethodTranslation], productManufacturerTranslations: [InputProductManufacturerTranslation], productTranslations: [InputProductTranslation], shippingMethodTranslations: [InputShippingMethodTranslation], unitTranslations: [InputUnitTranslation], propertyGroupTranslations: [InputPropertyGroupTranslation], propertyGroupOptionTranslations: [InputPropertyGroupOptionTranslation], discountSurchargeTranslations: [InputDiscountSurchargeTranslation], salesChannelTranslations: [InputSalesChannelTranslation], salesChannelTypeTranslations: [InputSalesChannelTypeTranslation], salutationTranslations: [InputSalutationTranslation], searchDocuments: [InputSearchDocument], pluginTranslations: [InputPluginTranslation], productStreamTranslations: [InputProductStreamTranslation], stateMachineTranslations: [InputStateMachineTranslation], stateMachineStateTranslations: [InputStateMachineStateTranslation], cmsPageTranslations: [InputCmsPageTranslation], cmsSlotTranslations: [InputCmsSlotTranslation], navigationTranslations: [InputNavigationTranslation], mailTemplateTranslations: [InputMailTemplateTranslation], mailHeaderFooterTranslations: [InputMailHeaderFooterTranslation], numberRangeTypeTranslations: [InputNumberRangeTypeTranslation], deliveryTimeTranslations: [InputDeliveryTimeTranslation]): Language
  deleteLanguage(id: ID!): ID
  createSalesChannel(id: ID, typeId: ID, languageId: ID, customerGroupId: ID, currencyId: ID, paymentMethodId: ID, shippingMethodId: ID, countryId: ID, navigationId: ID, navigationVersionId: ID, mailHeaderFooterId: ID, type: InputSalesChannelType, name: String, shortName: String, accessKey: String!, configuration: Json, active: Boolean, taxCalculationType: String, attributes: String, createdAt: Date, updatedAt: Date, translations: [InputSalesChannelTranslation], currencies: [InputCurrency], languages: [InputLanguage], countries: [InputCountry], paymentMethods: [InputPaymentMethod], shippingMethods: [InputShippingMethod], language: InputLanguage, customerGroup: InputCustomerGroup, currency: InputCurrency, paymentMethod: InputPaymentMethod, shippingMethod: InputShippingMethod, country: InputCountry, orders: [InputOrder], customers: [InputCustomer], domains: [InputSalesChannelDomain], systemConfigs: [InputSystemConfig], navigation: InputNavigation, productVisibilities: [InputProductVisibility], mailHeaderFooter: InputMailHeaderFooter, newsletterReceivers: [InputNewsletterReceiver], mailTemplates: [InputMailTemplate], numberRangeSalesChannels: [InputNumberRangeSalesChannel], promotionSalesChannels: [InputPromotionSalesChannel], translated: Json, seoUrls: [InputSeoUrl], seoUrlTemplates: [InputSeoUrlTemplate]): SalesChannel
  updateSalesChannel(id: ID!, typeId: ID, languageId: ID, customerGroupId: ID, currencyId: ID, paymentMethodId: ID, shippingMethodId: ID, countryId: ID, navigationId: ID, navigationVersionId: ID, mailHeaderFooterId: ID, type: InputSalesChannelType, name: String, shortName: String, accessKey: String, configuration: Json, active: Boolean, taxCalculationType: String, attributes: String, createdAt: Date, updatedAt: Date, translations: [InputSalesChannelTranslation], currencies: [InputCurrency], languages: [InputLanguage], countries: [InputCountry], paymentMethods: [InputPaymentMethod], shippingMethods: [InputShippingMethod], language: InputLanguage, customerGroup: InputCustomerGroup, currency: InputCurrency, paymentMethod: InputPaymentMethod, shippingMethod: InputShippingMethod, country: InputCountry, orders: [InputOrder], customers: [InputCustomer], domains: [InputSalesChannelDomain], systemConfigs: [InputSystemConfig], navigation: InputNavigation, productVisibilities: [InputProductVisibility], mailHeaderFooter: InputMailHeaderFooter, newsletterReceivers: [InputNewsletterReceiver], mailTemplates: [InputMailTemplate], numberRangeSalesChannels: [InputNumberRangeSalesChannel], promotionSalesChannels: [InputPromotionSalesChannel], translated: Json, seoUrls: [InputSeoUrl], seoUrlTemplates: [InputSeoUrlTemplate]): SalesChannel
  deleteSalesChannel(id: ID!): ID
  createSalesChannelDomain(id: ID, url: String!, salesChannelId: ID, languageId: ID, currencyId: ID, snippetSetId: ID, createdAt: Date, updatedAt: Date, salesChannel: InputSalesChannel, language: InputLanguage, currency: InputCurrency, snippetSet: InputSnippetSet, attributes: Json): SalesChannelDomain
  updateSalesChannelDomain(id: ID!, url: String, salesChannelId: ID, languageId: ID, currencyId: ID, snippetSetId: ID, createdAt: Date, updatedAt: Date, salesChannel: InputSalesChannel, language: InputLanguage, currency: InputCurrency, snippetSet: InputSnippetSet, attributes: Json): SalesChannelDomain
  deleteSalesChannelDomain(id: ID!): ID
  createSalesChannelType(id: ID, coverUrl: String, iconName: String, screenshotUrls: Json, name: String, manufacturer: String, description: String, descriptionLong: String, attributes: String, createdAt: Date, updatedAt: Date, translations: [InputSalesChannelTypeTranslation], salesChannels: [InputSalesChannel], translated: Json): SalesChannelType
  updateSalesChannelType(id: ID!, coverUrl: String, iconName: String, screenshotUrls: Json, name: String, manufacturer: String, description: String, descriptionLong: String, attributes: String, createdAt: Date, updatedAt: Date, translations: [InputSalesChannelTypeTranslation], salesChannels: [InputSalesChannel], translated: Json): SalesChannelType
  deleteSalesChannelType(id: ID!): ID
  createCountry(id: ID, name: String, iso: String, position: Int, taxFree: Boolean, active: Boolean, iso3: String, displayStateInRegistration: Boolean, forceStateInRegistration: Boolean, attributes: String, createdAt: Date, updatedAt: Date, salesChannelDefaultAssignments: [InputSalesChannel], states: [InputCountryState], translations: [InputCountryTranslation], customerAddresses: [InputCustomerAddress], orderAddresses: [InputOrderAddress], salesChannels: [InputSalesChannel], translated: Json): Country
  updateCountry(id: ID!, name: String, iso: String, position: Int, taxFree: Boolean, active: Boolean, iso3: String, displayStateInRegistration: Boolean, forceStateInRegistration: Boolean, attributes: String, createdAt: Date, updatedAt: Date, salesChannelDefaultAssignments: [InputSalesChannel], states: [InputCountryState], translations: [InputCountryTranslation], customerAddresses: [InputCustomerAddress], orderAddresses: [InputOrderAddress], salesChannels: [InputSalesChannel], translated: Json): Country
  deleteCountry(id: ID!): ID
  createCountryState(id: ID, countryId: ID, shortCode: String!, name: String, position: Int, active: Boolean, attributes: String, createdAt: Date, updatedAt: Date, country: InputCountry, translations: [InputCountryStateTranslation], customerAddresses: [InputCustomerAddress], orderAddresses: [InputOrderAddress], translated: Json): CountryState
  updateCountryState(id: ID!, countryId: ID, shortCode: String, name: String, position: Int, active: Boolean, attributes: String, createdAt: Date, updatedAt: Date, country: InputCountry, translations: [InputCountryStateTranslation], customerAddresses: [InputCustomerAddress], orderAddresses: [InputOrderAddress], translated: Json): CountryState
  deleteCountryState(id: ID!): ID
  createCurrency(id: ID, factor: Float!, symbol: String!, shortName: String, name: String, decimalPrecision: Int!, position: Int, isDefault: Boolean, attributes: String, createdAt: Date, updatedAt: Date, salesChannelDefaultAssignments: [InputSalesChannel], translations: [InputCurrencyTranslation], orders: [InputOrder], productPrices: [InputProductPrice], shippingMethodPrices: [InputShippingMethodPrice], salesChannels: [InputSalesChannel], salesChannelDomains: [InputSalesChannelDomain], translated: Json): Currency
  updateCurrency(id: ID!, factor: Float, symbol: String, shortName: String, name: String, decimalPrecision: Int, position: Int, isDefault: Boolean, attributes: String, createdAt: Date, updatedAt: Date, salesChannelDefaultAssignments: [InputSalesChannel], translations: [InputCurrencyTranslation], orders: [InputOrder], productPrices: [InputProductPrice], shippingMethodPrices: [InputShippingMethodPrice], salesChannels: [InputSalesChannel], salesChannelDomains: [InputSalesChannelDomain], translated: Json): Currency
  deleteCurrency(id: ID!): ID
  createLocale(id: ID, code: String!, name: String, territory: String, attributes: String, createdAt: Date, updatedAt: Date, languages: [InputLanguage], translations: [InputLocaleTranslation], users: [InputUser], translated: Json): Locale
  updateLocale(id: ID!, code: String, name: String, territory: String, attributes: String, createdAt: Date, updatedAt: Date, languages: [InputLanguage], translations: [InputLocaleTranslation], users: [InputUser], translated: Json): Locale
  deleteLocale(id: ID!): ID
  createSnippetSet(id: ID, name: String!, baseFile: String!, iso: String!, attributes: Json, createdAt: Date, updatedAt: Date, snippets: [InputSnippet], salesChannelDomains: [InputSalesChannelDomain]): SnippetSet
  updateSnippetSet(id: ID!, name: String, baseFile: String, iso: String, attributes: Json, createdAt: Date, updatedAt: Date, snippets: [InputSnippet], salesChannelDomains: [InputSalesChannelDomain]): SnippetSet
  deleteSnippetSet(id: ID!): ID
  createSnippet(id: ID, setId: ID, translationKey: String!, value: String!, author: String!, attributes: Json, createdAt: Date, updatedAt: Date, set: InputSnippetSet): Snippet
  updateSnippet(id: ID!, setId: ID, translationKey: String, value: String, author: String, attributes: Json, createdAt: Date, updatedAt: Date, set: InputSnippetSet): Snippet
  deleteSnippet(id: ID!): ID
  createSalutation(id: ID, salutationKey: String!, displayName: String, letterName: String, createdAt: Date, updatedAt: Date, translations: [InputSalutationTranslation], customers: [InputCustomer], customerAddresses: [InputCustomerAddress], orderCustomers: [InputOrderCustomer], orderAddresses: [InputOrderAddress], newsletterReceivers: [InputNewsletterReceiver], translated: Json): Salutation
  updateSalutation(id: ID!, salutationKey: String, displayName: String, letterName: String, createdAt: Date, updatedAt: Date, translations: [InputSalutationTranslation], customers: [InputCustomer], customerAddresses: [InputCustomerAddress], orderCustomers: [InputOrderCustomer], orderAddresses: [InputOrderAddress], newsletterReceivers: [InputNewsletterReceiver], translated: Json): Salutation
  deleteSalutation(id: ID!): ID
  createTax(id: ID, taxRate: Float!, name: String!, attributes: Json, createdAt: Date, updatedAt: Date, products: [InputProduct]): Tax
  updateTax(id: ID!, taxRate: Float, name: String, attributes: Json, createdAt: Date, updatedAt: Date, products: [InputProduct]): Tax
  deleteTax(id: ID!): ID
  createUnit(id: ID, shortCode: String, name: String, attributes: String, createdAt: Date, updatedAt: Date, products: [InputProduct], translations: [InputUnitTranslation], translated: Json): Unit
  updateUnit(id: ID!, shortCode: String, name: String, attributes: String, createdAt: Date, updatedAt: Date, products: [InputProduct], translations: [InputUnitTranslation], translated: Json): Unit
  deleteUnit(id: ID!): ID
  createUser(id: ID, localeId: ID, avatarId: ID, username: String!, firstName: String!, lastName: String!, email: String!, active: Boolean, attributes: Json, createdAt: Date, updatedAt: Date, locale: InputLocale, media: [InputMedia], accessKeys: [InputUserAccessKey], stateMachineHistoryEntries: [InputStateMachineHistory], storeToken: String): User
  updateUser(id: ID!, localeId: ID, avatarId: ID, username: String, firstName: String, lastName: String, email: String, active: Boolean, attributes: Json, createdAt: Date, updatedAt: Date, locale: InputLocale, media: [InputMedia], accessKeys: [InputUserAccessKey], stateMachineHistoryEntries: [InputStateMachineHistory], storeToken: String): User
  deleteUser(id: ID!): ID
  createUserAccessKey(id: ID, userId: ID, accessKey: String!, writeAccess: Boolean, lastUsageAt: Date, attributes: Json, createdAt: Date, user: InputUser): UserAccessKey
  updateUserAccessKey(id: ID!, userId: ID, accessKey: String, writeAccess: Boolean, lastUsageAt: Date, attributes: Json, createdAt: Date, user: InputUser): UserAccessKey
  deleteUserAccessKey(id: ID!): ID
  createUserRecovery(id: ID, hash: String!, userId: ID, createdAt: Date): UserRecovery
  updateUserRecovery(id: ID!, hash: String, userId: ID, createdAt: Date): UserRecovery
  deleteUserRecovery(id: ID!): ID
  createIntegration(id: ID, label: String!, accessKey: String!, writeAccess: Boolean, lastUsageAt: Date, attributes: Json, createdAt: Date, updatedAt: Date): Integration
  updateIntegration(id: ID!, label: String, accessKey: String, writeAccess: Boolean, lastUsageAt: Date, attributes: Json, createdAt: Date, updatedAt: Date): Integration
  deleteIntegration(id: ID!): ID
  createStateMachine(id: ID, technicalName: String!, name: String, attributes: String, states: [InputStateMachineState], transitions: [InputStateMachineTransition], initialStateId: ID, translations: [InputStateMachineTranslation], createdAt: Date, updatedAt: Date, historyEntries: [InputStateMachineHistory], translated: Json): StateMachine
  updateStateMachine(id: ID!, technicalName: String, name: String, attributes: String, states: [InputStateMachineState], transitions: [InputStateMachineTransition], initialStateId: ID, translations: [InputStateMachineTranslation], createdAt: Date, updatedAt: Date, historyEntries: [InputStateMachineHistory], translated: Json): StateMachine
  deleteStateMachine(id: ID!): ID
  createStateMachineState(id: ID, technicalName: String!, name: String, stateMachineId: ID, stateMachine: InputStateMachine, fromStateMachineTransitions: [InputStateMachineTransition], toStateMachineTransitions: [InputStateMachineTransition], translations: [InputStateMachineStateTranslation], orderTransactions: [InputOrderTransaction], orderDeliveries: [InputOrderDelivery], orders: [InputOrder], attributes: String, createdAt: Date, updatedAt: Date, toStateMachineHistoryEntries: [InputStateMachineHistory], fromStateMachineHistoryEntries: [InputStateMachineHistory], translated: Json): StateMachineState
  updateStateMachineState(id: ID!, technicalName: String, name: String, stateMachineId: ID, stateMachine: InputStateMachine, fromStateMachineTransitions: [InputStateMachineTransition], toStateMachineTransitions: [InputStateMachineTransition], translations: [InputStateMachineStateTranslation], orderTransactions: [InputOrderTransaction], orderDeliveries: [InputOrderDelivery], orders: [InputOrder], attributes: String, createdAt: Date, updatedAt: Date, toStateMachineHistoryEntries: [InputStateMachineHistory], fromStateMachineHistoryEntries: [InputStateMachineHistory], translated: Json): StateMachineState
  deleteStateMachineState(id: ID!): ID
  createStateMachineTransition(id: ID, actionName: String!, stateMachineId: ID, stateMachine: InputStateMachine, fromStateId: ID, fromStateMachineState: InputStateMachineState, toStateId: ID, toStateMachineState: InputStateMachineState, createdAt: Date, updatedAt: Date, attributes: Json): StateMachineTransition
  updateStateMachineTransition(id: ID!, actionName: String, stateMachineId: ID, stateMachine: InputStateMachine, fromStateId: ID, fromStateMachineState: InputStateMachineState, toStateId: ID, toStateMachineState: InputStateMachineState, createdAt: Date, updatedAt: Date, attributes: Json): StateMachineTransition
  deleteStateMachineTransition(id: ID!): ID
  createStateMachineHistory(id: ID, stateMachineId: ID, stateMachine: InputStateMachine, entityName: String!, entityId: Json!, fromStateId: ID, fromStateMachineState: InputStateMachineState, toStateId: ID, toStateMachineState: InputStateMachineState, transitionActionName: String, userId: ID, user: InputUser, createdAt: Date): StateMachineHistory
  updateStateMachineHistory(id: ID!, stateMachineId: ID, stateMachine: InputStateMachine, entityName: String, entityId: Json, fromStateId: ID, fromStateMachineState: InputStateMachineState, toStateId: ID, toStateMachineState: InputStateMachineState, transitionActionName: String, userId: ID, user: InputUser, createdAt: Date): StateMachineHistory
  deleteStateMachineHistory(id: ID!): ID
  createSystemConfig(id: ID, namespace: String!, configurationKey: String!, configurationValue: String!, createdAt: Date, updatedAt: Date, salesChannelId: ID, salesChannel: InputSalesChannel): SystemConfig
  updateSystemConfig(id: ID!, namespace: String, configurationKey: String, configurationValue: String, createdAt: Date, updatedAt: Date, salesChannelId: ID, salesChannel: InputSalesChannel): SystemConfig
  deleteSystemConfig(id: ID!): ID
  createNumberRange(id: ID, typeId: ID, global: Boolean!, name: String, description: String, pattern: String!, start: Int, createdAt: Date, updatedAt: Date, attributes: String, type: InputNumberRangeType!, numberRangeSalesChannels: [InputNumberRangeSalesChannel], translations: [InputNumberRangeTranslation], translated: Json): NumberRange
  updateNumberRange(id: ID!, typeId: ID, global: Boolean, name: String, description: String, pattern: String, start: Int, createdAt: Date, updatedAt: Date, attributes: String, type: InputNumberRangeType, numberRangeSalesChannels: [InputNumberRangeSalesChannel], translations: [InputNumberRangeTranslation], translated: Json): NumberRange
  deleteNumberRange(id: ID!): ID
  createNumberRangeSalesChannel(id: ID, numberRangeId: ID, salesChannelId: ID, numberRangeTypeId: ID, numberRange: InputNumberRange, salesChannel: InputSalesChannel, numberRangeType: InputNumberRangeType): NumberRangeSalesChannel
  updateNumberRangeSalesChannel(id: ID!, numberRangeId: ID, salesChannelId: ID, numberRangeTypeId: ID, numberRange: InputNumberRange, salesChannel: InputSalesChannel, numberRangeType: InputNumberRangeType): NumberRangeSalesChannel
  deleteNumberRangeSalesChannel(id: ID!): ID
  createNumberRangeState(id: ID, numberRangeId: ID, lastValue: Int!): NumberRangeState
  updateNumberRangeState(id: ID!, numberRangeId: ID, lastValue: Int): NumberRangeState
  deleteNumberRangeState(id: ID!): ID
  createNumberRangeType(id: ID, technicalName: String, typeName: String, global: Boolean!, attributes: String, createdAt: Date, updatedAt: Date, numberRanges: [InputNumberRange], numberRangeSalesChannels: [InputNumberRangeSalesChannel], translations: [InputNumberRangeTypeTranslation], translated: Json): NumberRangeType
  updateNumberRangeType(id: ID!, technicalName: String, typeName: String, global: Boolean, attributes: String, createdAt: Date, updatedAt: Date, numberRanges: [InputNumberRange], numberRangeSalesChannels: [InputNumberRangeSalesChannel], translations: [InputNumberRangeTypeTranslation], translated: Json): NumberRangeType
  deleteNumberRangeType(id: ID!): ID
  createCategory(id: ID, versionId: ID, parentId: ID, parentVersionId: ID, afterCategoryId: ID, afterCategoryVersionId: ID, mediaId: ID, displayNestedProducts: Boolean! = true, autoIncrement: Int, path: String, level: Int, active: Boolean = false, childCount: Int, createdAt: Date, updatedAt: Date, name: String, attributes: String, parent: InputCategory, media: InputMedia, children: [InputCategory], translations: [InputCategoryTranslation], navigations: [InputNavigation], products: [InputProduct], nestedProducts: [InputProduct], tags: [InputTag], translated: Json): Category
  updateCategory(id: ID!, versionId: ID, parentId: ID, parentVersionId: ID, afterCategoryId: ID, afterCategoryVersionId: ID, mediaId: ID, displayNestedProducts: Boolean, autoIncrement: Int, path: String, level: Int, active: Boolean, childCount: Int, createdAt: Date, updatedAt: Date, name: String, attributes: String, parent: InputCategory, media: InputMedia, children: [InputCategory], translations: [InputCategoryTranslation], navigations: [InputNavigation], products: [InputProduct], nestedProducts: [InputProduct], tags: [InputTag], translated: Json): Category
  deleteCategory(id: ID!, versionId: ID): ID
  createMedia(id: ID, userId: ID, mediaFolderId: ID, mimeType: String, fileExtension: String, uploadedAt: Date, fileName: String, fileSize: Int, metaData: Json, mediaType: Json, createdAt: Date, updatedAt: Date, alt: String, title: String, url: String, attributes: String, user: InputUser, categories: [InputCategory], productManufacturers: [InputProductManufacturer], productMedia: [InputProductMedia], translations: [InputMediaTranslation], thumbnails: [InputMediaThumbnail], hasFile: Boolean, mediaFolder: InputMediaFolder, propertyGroupOptions: [InputPropertyGroupOption], tags: [InputTag], mailTemplateMedia: [InputMailTemplateMedia], shippingMethods: [InputShippingMethod], translated: Json): Media
  updateMedia(id: ID!, userId: ID, mediaFolderId: ID, mimeType: String, fileExtension: String, uploadedAt: Date, fileName: String, fileSize: Int, metaData: Json, mediaType: Json, createdAt: Date, updatedAt: Date, alt: String, title: String, url: String, attributes: String, user: InputUser, categories: [InputCategory], productManufacturers: [InputProductManufacturer], productMedia: [InputProductMedia], translations: [InputMediaTranslation], thumbnails: [InputMediaThumbnail], hasFile: Boolean, mediaFolder: InputMediaFolder, propertyGroupOptions: [InputPropertyGroupOption], tags: [InputTag], mailTemplateMedia: [InputMailTemplateMedia], shippingMethods: [InputShippingMethod], translated: Json): Media
  deleteMedia(id: ID!): ID
  createMediaDefaultFolder(id: ID, associationFields: Json!, entity: String!, createdAt: Date, updatedAt: Date, attributes: Json): MediaDefaultFolder
  updateMediaDefaultFolder(id: ID!, associationFields: Json, entity: String, createdAt: Date, updatedAt: Date, attributes: Json): MediaDefaultFolder
  deleteMediaDefaultFolder(id: ID!): ID
  createMediaThumbnail(id: ID, mediaId: ID, createdAt: Date, updatedAt: Date, width: Int!, height: Int!, url: String, media: InputMedia, attributes: Json): MediaThumbnail
  updateMediaThumbnail(id: ID!, mediaId: ID, createdAt: Date, updatedAt: Date, width: Int, height: Int, url: String, media: InputMedia, attributes: Json): MediaThumbnail
  deleteMediaThumbnail(id: ID!): ID
  createMediaFolder(id: ID, useParentConfiguration: Boolean = true, configurationId: ID, defaultFolderId: ID, parentId: ID, parent: InputMediaFolder, children: [InputMediaFolder], childCount: Int, media: [InputMedia], configuration: InputMediaFolderConfiguration, name: String!, createdAt: Date, updatedAt: Date, attributes: Json): MediaFolder
  updateMediaFolder(id: ID!, useParentConfiguration: Boolean, configurationId: ID, defaultFolderId: ID, parentId: ID, parent: InputMediaFolder, children: [InputMediaFolder], childCount: Int, media: [InputMedia], configuration: InputMediaFolderConfiguration, name: String, createdAt: Date, updatedAt: Date, attributes: Json): MediaFolder
  deleteMediaFolder(id: ID!): ID
  createMediaThumbnailSize(id: ID, width: Int!, height: Int!, mediaFolderConfigurations: [InputMediaFolderConfiguration], attributes: Json, createdAt: Date, updatedAt: Date): MediaThumbnailSize
  updateMediaThumbnailSize(id: ID!, width: Int, height: Int, mediaFolderConfigurations: [InputMediaFolderConfiguration], attributes: Json, createdAt: Date, updatedAt: Date): MediaThumbnailSize
  deleteMediaThumbnailSize(id: ID!): ID
  createMediaFolderConfiguration(id: ID, createThumbnails: Boolean = true, keepAspectRatio: Boolean = true, thumbnailQuality: Int = 80, mediaFolders: [InputMediaFolder], mediaThumbnailSizes: [InputMediaThumbnailSize], createdAt: Date, updatedAt: Date, attributes: Json): MediaFolderConfiguration
  updateMediaFolderConfiguration(id: ID!, createThumbnails: Boolean, keepAspectRatio: Boolean, thumbnailQuality: Int, mediaFolders: [InputMediaFolder], mediaThumbnailSizes: [InputMediaThumbnailSize], createdAt: Date, updatedAt: Date, attributes: Json): MediaFolderConfiguration
  deleteMediaFolderConfiguration(id: ID!): ID
  createProduct(id: ID, versionId: ID, parentId: ID, parentVersionId: ID, blacklistIds: Json, whitelistIds: Json, autoIncrement: Int, active: Boolean, stock: Int!, createdAt: Date, updatedAt: Date, manufacturerId: ID, productManufacturerVersionId: ID, unitId: ID, taxId: ID, coverId: ID, productMediaVersionId: ID, price: Json!, listingPrices: Json, manufacturerNumber: String, ean: String, productNumber: String, isCloseout: Boolean, purchaseSteps: Int = 1, maxPurchase: Int, minPurchase: Int = 1, purchaseUnit: Float, referenceUnit: Float, shippingFree: Boolean = false, purchasePrice: Float, markAsTopseller: Boolean, weight: Float, width: Float, height: Float, length: Float, releaseDate: Date, categoryTree: Json, propertyIds: Json, optionIds: Json, minDeliveryTime: Int = 1, maxDeliveryTime: Int = 2, restockTime: Int = 1, tagIds: Json, additionalText: String, name: String, keywords: String, description: String, metaTitle: String, packUnit: String, attributes: String, parent: InputProduct, children: [InputProduct], tax: InputTax, manufacturer: InputProductManufacturer, unit: InputUnit, cover: InputProductMedia, prices: [InputProductPrice], media: [InputProductMedia], properties: [InputPropertyGroupOption], categories: [InputCategory], tags: [InputTag], searchKeywords: [InputSearchDocument], categoriesRo: [InputCategory], translations: [InputProductTranslation], configuratorSettings: [InputProductConfiguratorSetting], options: [InputPropertyGroupOption], visibilities: [InputProductVisibility], translated: Json, canonicalUrl: InputSeoUrl, seoUrls: [InputSeoUrl]): Product
  updateProduct(id: ID!, versionId: ID, parentId: ID, parentVersionId: ID, blacklistIds: Json, whitelistIds: Json, autoIncrement: Int, active: Boolean, stock: Int, createdAt: Date, updatedAt: Date, manufacturerId: ID, productManufacturerVersionId: ID, unitId: ID, taxId: ID, coverId: ID, productMediaVersionId: ID, price: Json, listingPrices: Json, manufacturerNumber: String, ean: String, productNumber: String, isCloseout: Boolean, purchaseSteps: Int, maxPurchase: Int, minPurchase: Int, purchaseUnit: Float, referenceUnit: Float, shippingFree: Boolean, purchasePrice: Float, markAsTopseller: Boolean, weight: Float, width: Float, height: Float, length: Float, releaseDate: Date, categoryTree: Json, propertyIds: Json, optionIds: Json, minDeliveryTime: Int, maxDeliveryTime: Int, restockTime: Int, tagIds: Json, additionalText: String, name: String, keywords: String, description: String, metaTitle: String, packUnit: String, attributes: String, parent: InputProduct, children: [InputProduct], tax: InputTax, manufacturer: InputProductManufacturer, unit: InputUnit, cover: InputProductMedia, prices: [InputProductPrice], media: [InputProductMedia], properties: [InputPropertyGroupOption], categories: [InputCategory], tags: [InputTag], searchKeywords: [InputSearchDocument], categoriesRo: [InputCategory], translations: [InputProductTranslation], configuratorSettings: [InputProductConfiguratorSetting], options: [InputPropertyGroupOption], visibilities: [InputProductVisibility], translated: Json, canonicalUrl: InputSeoUrl, seoUrls: [InputSeoUrl]): Product
  deleteProduct(id: ID!, versionId: ID): ID
  createProductConfiguratorSetting(id: ID, versionId: ID, productId: ID, productVersionId: ID, optionId: ID, price: Json, prices: Json, createdAt: Date, updatedAt: Date, product: InputProduct, option: InputPropertyGroupOption, attributes: Json): ProductConfiguratorSetting
  updateProductConfiguratorSetting(id: ID!, versionId: ID, productId: ID, productVersionId: ID, optionId: ID, price: Json, prices: Json, createdAt: Date, updatedAt: Date, product: InputProduct, option: InputPropertyGroupOption, attributes: Json): ProductConfiguratorSetting
  deleteProductConfiguratorSetting(id: ID!, versionId: ID): ID
  createProductPrice(id: ID, versionId: ID, productId: ID, productVersionId: ID, currencyId: ID, ruleId: ID, price: Json!, quantityStart: Int!, quantityEnd: Int, createdAt: Date, updatedAt: Date, product: InputProduct, currency: InputCurrency, rule: InputRule, attributes: Json): ProductPrice
  updateProductPrice(id: ID!, versionId: ID, productId: ID, productVersionId: ID, currencyId: ID, ruleId: ID, price: Json, quantityStart: Int, quantityEnd: Int, createdAt: Date, updatedAt: Date, product: InputProduct, currency: InputCurrency, rule: InputRule, attributes: Json): ProductPrice
  deleteProductPrice(id: ID!, versionId: ID): ID
  createProductManufacturer(id: ID, versionId: ID, mediaId: ID, link: String, updatedAt: Date, createdAt: Date, name: String, description: String, attributes: String, media: InputMedia, products: [InputProduct], translations: [InputProductManufacturerTranslation], translated: Json): ProductManufacturer
  updateProductManufacturer(id: ID!, versionId: ID, mediaId: ID, link: String, updatedAt: Date, createdAt: Date, name: String, description: String, attributes: String, media: InputMedia, products: [InputProduct], translations: [InputProductManufacturerTranslation], translated: Json): ProductManufacturer
  deleteProductManufacturer(id: ID!, versionId: ID): ID
  createProductMedia(id: ID, versionId: ID, productId: ID, productVersionId: ID, mediaId: ID, position: Int, createdAt: Date, updatedAt: Date, product: InputProduct, media: InputMedia, attributes: Json): ProductMedia
  updateProductMedia(id: ID!, versionId: ID, productId: ID, productVersionId: ID, mediaId: ID, position: Int, createdAt: Date, updatedAt: Date, product: InputProduct, media: InputMedia, attributes: Json): ProductMedia
  deleteProductMedia(id: ID!, versionId: ID): ID
  createSearchDocument(id: ID, languageId: ID, entityId: ID, entity: String!, keyword: String!, ranking: Float!, attributes: Json, language: InputLanguage): SearchDocument
  updateSearchDocument(id: ID!, languageId: ID!, entityId: ID!, entity: String, keyword: String, ranking: Float, attributes: Json, language: InputLanguage): SearchDocument
  deleteSearchDocument(id: ID!, languageId: ID!, entityId: ID!): ID
  createProductVisibility(id: ID, productId: ID, productVersionId: ID, salesChannelId: ID, visibility: Int!, salesChannel: InputSalesChannel, product: InputProduct, createdAt: Date, updatedAt: Date): ProductVisibility
  updateProductVisibility(id: ID!, productId: ID, productVersionId: ID, salesChannelId: ID, visibility: Int, salesChannel: InputSalesChannel, product: InputProduct, createdAt: Date, updatedAt: Date): ProductVisibility
  deleteProductVisibility(id: ID!): ID
  createDeliveryTime(id: ID, name: String!, min: Int!, max: Int!, unit: String!, attributes: String, createdAt: Date, updatedAt: Date, shippingMethods: [InputShippingMethod], translations: [InputDeliveryTimeTranslation], translated: Json): DeliveryTime
  updateDeliveryTime(id: ID!, name: String, min: Int, max: Int, unit: String, attributes: String, createdAt: Date, updatedAt: Date, shippingMethods: [InputShippingMethod], translations: [InputDeliveryTimeTranslation], translated: Json): DeliveryTime
  deleteDeliveryTime(id: ID!): ID
  createNavigation(id: ID, versionId: ID, parentId: ID, parentVersionId: ID, categoryId: ID, categoryVersionId: ID, category: InputCategory, cmsPageId: ID, cmsPage: InputCmsPage, name: String, slotConfig: String, level: Int, path: String, childCount: Int, createdAt: Date, updatedAt: Date, translations: [InputNavigationTranslation], children: [InputNavigation], parent: InputNavigation, salesChannelNavigations: [InputSalesChannel], translated: Json): Navigation
  updateNavigation(id: ID!, versionId: ID, parentId: ID, parentVersionId: ID, categoryId: ID, categoryVersionId: ID, category: InputCategory, cmsPageId: ID, cmsPage: InputCmsPage, name: String, slotConfig: String, level: Int, path: String, childCount: Int, createdAt: Date, updatedAt: Date, translations: [InputNavigationTranslation], children: [InputNavigation], parent: InputNavigation, salesChannelNavigations: [InputSalesChannel], translated: Json): Navigation
  deleteNavigation(id: ID!, versionId: ID): ID
  createNewsletterReceiver(id: ID, email: String!, firstName: String, lastName: String, zipCode: String, city: String, street: String, status: String, attributes: Json, createdAt: Date, updatedAt: Date, salutationId: ID, salutation: InputSalutation!, languageId: ID, language: InputLanguage!, salesChannelId: ID, salesChannel: InputSalesChannel!): NewsletterReceiver
  updateNewsletterReceiver(id: ID!, email: String, firstName: String, lastName: String, zipCode: String, city: String, street: String, status: String, attributes: Json, createdAt: Date, updatedAt: Date, salutationId: ID, salutation: InputSalutation, languageId: ID, language: InputLanguage, salesChannelId: ID, salesChannel: InputSalesChannel): NewsletterReceiver
  deleteNewsletterReceiver(id: ID!): ID
  createRule(id: ID, name: String!, priority: Int!, description: String, invalid: Boolean, attributes: Json, createdAt: Date, updatedAt: Date, moduleTypes: Json, conditions: [InputRuleCondition], discountSurcharges: [InputDiscountSurcharge], productPrices: [InputProductPrice], shippingMethodPrices: [InputShippingMethodPrice], shippingMethodPriceCalculations: [InputShippingMethodPrice], shippingMethods: [InputShippingMethod], paymentMethods: [InputPaymentMethod], personaPromotions: [InputPromotion], scopePromotions: [InputPromotion], discountPromotions: [InputPromotion]): Rule
  updateRule(id: ID!, name: String, priority: Int, description: String, invalid: Boolean, attributes: Json, createdAt: Date, updatedAt: Date, moduleTypes: Json, conditions: [InputRuleCondition], discountSurcharges: [InputDiscountSurcharge], productPrices: [InputProductPrice], shippingMethodPrices: [InputShippingMethodPrice], shippingMethodPriceCalculations: [InputShippingMethodPrice], shippingMethods: [InputShippingMethod], paymentMethods: [InputPaymentMethod], personaPromotions: [InputPromotion], scopePromotions: [InputPromotion], discountPromotions: [InputPromotion]): Rule
  deleteRule(id: ID!): ID
  createRuleCondition(id: ID, type: String, ruleId: ID, parentId: ID, value: Json, position: Int, rule: InputRule, parent: InputRuleCondition, children: [InputRuleCondition], attributes: Json): RuleCondition
  updateRuleCondition(id: ID!, type: String, ruleId: ID, parentId: ID, value: Json, position: Int, rule: InputRule, parent: InputRuleCondition, children: [InputRuleCondition], attributes: Json): RuleCondition
  deleteRuleCondition(id: ID!): ID
  createProductStream(id: ID, apiFilter: Json, invalid: Boolean, createdAt: Date, updatedAt: Date, name: String, description: String, attributes: String, translations: [InputProductStreamTranslation], filters: [InputProductStreamFilter], translated: Json): ProductStream
  updateProductStream(id: ID!, apiFilter: Json, invalid: Boolean, createdAt: Date, updatedAt: Date, name: String, description: String, attributes: String, translations: [InputProductStreamTranslation], filters: [InputProductStreamFilter], translated: Json): ProductStream
  deleteProductStream(id: ID!): ID
  createProductStreamFilter(id: ID, productStreamId: ID, parentId: ID, type: String!, field: String, operator: String, value: String, parameters: Json, position: Int, createdAt: Date, updatedAt: Date, productStream: InputProductStream, parent: InputProductStreamFilter, queries: [InputProductStreamFilter], attributes: Json): ProductStreamFilter
  updateProductStreamFilter(id: ID!, productStreamId: ID, parentId: ID, type: String, field: String, operator: String, value: String, parameters: Json, position: Int, createdAt: Date, updatedAt: Date, productStream: InputProductStream, parent: InputProductStreamFilter, queries: [InputProductStreamFilter], attributes: Json): ProductStreamFilter
  deleteProductStreamFilter(id: ID!): ID
  createPropertyGroup(id: ID, name: String, description: String, displayType: String! = "text", sortingType: String! = "alphanumeric", attributes: String, createdAt: Date, updatedAt: Date, options: [InputPropertyGroupOption], translations: [InputPropertyGroupTranslation], translated: Json): PropertyGroup
  updatePropertyGroup(id: ID!, name: String, description: String, displayType: String, sortingType: String, attributes: String, createdAt: Date, updatedAt: Date, options: [InputPropertyGroupOption], translations: [InputPropertyGroupTranslation], translated: Json): PropertyGroup
  deletePropertyGroup(id: ID!): ID
  createPropertyGroupOption(id: ID, groupId: ID, name: String, position: String, colorHexCode: String, mediaId: ID, attributes: String, createdAt: Date, updatedAt: Date, media: InputMedia, group: InputPropertyGroup, translations: [InputPropertyGroupOptionTranslation], productConfiguratorSettings: [InputProductConfiguratorSetting], productProperties: [InputProduct], productOptions: [InputProduct], translated: Json): PropertyGroupOption
  updatePropertyGroupOption(id: ID!, groupId: ID, name: String, position: String, colorHexCode: String, mediaId: ID, attributes: String, createdAt: Date, updatedAt: Date, media: InputMedia, group: InputPropertyGroup, translations: [InputPropertyGroupOptionTranslation], productConfiguratorSettings: [InputProductConfiguratorSetting], productProperties: [InputProduct], productOptions: [InputProduct], translated: Json): PropertyGroupOption
  deletePropertyGroupOption(id: ID!): ID
  createCmsPage(id: ID, name: String, type: String!, entity: String, config: Json, attributes: String, blocks: [InputCmsBlock], translations: [InputCmsPageTranslation], navigations: [InputNavigation], createdAt: Date, updatedAt: Date, translated: Json): CmsPage
  updateCmsPage(id: ID!, name: String, type: String, entity: String, config: Json, attributes: String, blocks: [InputCmsBlock], translations: [InputCmsPageTranslation], navigations: [InputNavigation], createdAt: Date, updatedAt: Date, translated: Json): CmsPage
  deleteCmsPage(id: ID!): ID
  createCmsBlock(id: ID, position: Int!, type: String!, config: Json, pageId: ID, page: InputCmsPage, slots: [InputCmsSlot], createdAt: Date, updatedAt: Date, attributes: Json): CmsBlock
  updateCmsBlock(id: ID!, position: Int, type: String, config: Json, pageId: ID, page: InputCmsPage, slots: [InputCmsSlot], createdAt: Date, updatedAt: Date, attributes: Json): CmsBlock
  deleteCmsBlock(id: ID!): ID
  createCmsSlot(id: ID, versionId: ID, type: String!, slot: String!, config: String, attributes: String, data: Json, blockId: ID, block: InputCmsBlock, translations: [InputCmsSlotTranslation], createdAt: Date, updatedAt: Date, translated: Json): CmsSlot
  updateCmsSlot(id: ID!, versionId: ID, type: String, slot: String, config: String, attributes: String, data: Json, blockId: ID, block: InputCmsBlock, translations: [InputCmsSlotTranslation], createdAt: Date, updatedAt: Date, translated: Json): CmsSlot
  deleteCmsSlot(id: ID!, versionId: ID): ID
  createMailTemplate(id: ID, senderMail: String!, mailType: String, systemDefault: Boolean, senderName: String, description: String, subject: String, contentHtml: String, contentPlain: String, createdAt: Date, updatedAt: Date, translations: [InputMailTemplateTranslation], salesChannels: [InputSalesChannel], media: [InputMailTemplateMedia], translated: Json): MailTemplate
  updateMailTemplate(id: ID!, senderMail: String, mailType: String, systemDefault: Boolean, senderName: String, description: String, subject: String, contentHtml: String, contentPlain: String, createdAt: Date, updatedAt: Date, translations: [InputMailTemplateTranslation], salesChannels: [InputSalesChannel], media: [InputMailTemplateMedia], translated: Json): MailTemplate
  deleteMailTemplate(id: ID!): ID
  createMailHeaderFooter(id: ID, systemDefault: Boolean, name: String, description: String, headerHtml: String, headerPlain: String, footerHtml: String, footerPlain: String, createdAt: Date, updatedAt: Date, translations: [InputMailHeaderFooterTranslation], salesChannels: [InputSalesChannel], translated: Json): MailHeaderFooter
  updateMailHeaderFooter(id: ID!, systemDefault: Boolean, name: String, description: String, headerHtml: String, headerPlain: String, footerHtml: String, footerPlain: String, createdAt: Date, updatedAt: Date, translations: [InputMailHeaderFooterTranslation], salesChannels: [InputSalesChannel], translated: Json): MailHeaderFooter
  deleteMailHeaderFooter(id: ID!): ID
  createCustomer(id: ID, groupId: ID, defaultPaymentMethodId: ID, salesChannelId: ID, languageId: ID, lastPaymentMethodId: ID, defaultBillingAddressId: ID, defaultShippingAddressId: ID, autoIncrement: Int, customerNumber: String!, salutationId: ID, firstName: String!, lastName: String!, company: String, email: String!, title: String, active: Boolean, guest: Boolean, firstLogin: Date, lastLogin: Date, newsletter: Boolean, birthday: Date, attributes: Json, createdAt: Date, updatedAt: Date, legacyPassword: String, legacyEncoder: String, group: InputCustomerGroup, defaultPaymentMethod: InputPaymentMethod, salesChannel: InputSalesChannel, language: InputLanguage, lastPaymentMethod: InputPaymentMethod, defaultBillingAddress: InputCustomerAddress, defaultShippingAddress: InputCustomerAddress, salutation: InputSalutation, addresses: [InputCustomerAddress], orderCustomers: [InputOrderCustomer], tags: [InputTag]): Customer
  updateCustomer(id: ID!, groupId: ID, defaultPaymentMethodId: ID, salesChannelId: ID, languageId: ID, lastPaymentMethodId: ID, defaultBillingAddressId: ID, defaultShippingAddressId: ID, autoIncrement: Int, customerNumber: String, salutationId: ID, firstName: String, lastName: String, company: String, email: String, title: String, active: Boolean, guest: Boolean, firstLogin: Date, lastLogin: Date, newsletter: Boolean, birthday: Date, attributes: Json, createdAt: Date, updatedAt: Date, legacyPassword: String, legacyEncoder: String, group: InputCustomerGroup, defaultPaymentMethod: InputPaymentMethod, salesChannel: InputSalesChannel, language: InputLanguage, lastPaymentMethod: InputPaymentMethod, defaultBillingAddress: InputCustomerAddress, defaultShippingAddress: InputCustomerAddress, salutation: InputSalutation, addresses: [InputCustomerAddress], orderCustomers: [InputOrderCustomer], tags: [InputTag]): Customer
  deleteCustomer(id: ID!): ID
  createCustomerAddress(id: ID, customerId: ID, countryId: ID, countryStateId: ID, salutationId: ID, firstName: String!, lastName: String!, zipcode: String!, city: String!, company: String, street: String!, department: String, title: String, vatId: String, phoneNumber: String, additionalAddressLine1: String, additionalAddressLine2: String, attributes: Json, createdAt: Date, updatedAt: Date, customer: InputCustomer, country: InputCountry, countryState: InputCountryState, salutation: InputSalutation): CustomerAddress
  updateCustomerAddress(id: ID!, customerId: ID, countryId: ID, countryStateId: ID, salutationId: ID, firstName: String, lastName: String, zipcode: String, city: String, company: String, street: String, department: String, title: String, vatId: String, phoneNumber: String, additionalAddressLine1: String, additionalAddressLine2: String, attributes: Json, createdAt: Date, updatedAt: Date, customer: InputCustomer, country: InputCountry, countryState: InputCountryState, salutation: InputSalutation): CustomerAddress
  deleteCustomerAddress(id: ID!): ID
  createCustomerGroup(id: ID, name: String, displayGross: Boolean, attributes: String, createdAt: Date, updatedAt: Date, customers: [InputCustomer], salesChannels: [InputSalesChannel], translations: [InputCustomerGroupTranslation], translated: Json): CustomerGroup
  updateCustomerGroup(id: ID!, name: String, displayGross: Boolean, attributes: String, createdAt: Date, updatedAt: Date, customers: [InputCustomer], salesChannels: [InputSalesChannel], translations: [InputCustomerGroupTranslation], translated: Json): CustomerGroup
  deleteCustomerGroup(id: ID!): ID
  createOrder(id: ID, versionId: ID, autoIncrement: Int, orderNumber: String, billingAddressId: ID, billingAddressVersionId: ID, currencyId: ID, salesChannelId: ID, orderDate: Date!, price: Json, amountTotal: Float, amountNet: Float, positionPrice: Float, taxStatus: String, shippingCosts: Json, shippingTotal: Float, currencyFactor: Float!, deepLinkCode: String, stateId: ID, stateMachineState: InputStateMachineState, attributes: Json, createdAt: Date, updatedAt: Date, currency: InputCurrency, salesChannel: InputSalesChannel, addresses: [InputOrderAddress], deliveries: [InputOrderDelivery], lineItems: [InputOrderLineItem], transactions: [InputOrderTransaction], documents: [InputDocument], tags: [InputTag]): Order
  updateOrder(id: ID!, versionId: ID, autoIncrement: Int, orderNumber: String, billingAddressId: ID, billingAddressVersionId: ID, currencyId: ID, salesChannelId: ID, orderDate: Date, price: Json, amountTotal: Float, amountNet: Float, positionPrice: Float, taxStatus: String, shippingCosts: Json, shippingTotal: Float, currencyFactor: Float, deepLinkCode: String, stateId: ID, stateMachineState: InputStateMachineState, attributes: Json, createdAt: Date, updatedAt: Date, currency: InputCurrency, salesChannel: InputSalesChannel, addresses: [InputOrderAddress], deliveries: [InputOrderDelivery], lineItems: [InputOrderLineItem], transactions: [InputOrderTransaction], documents: [InputDocument], tags: [InputTag]): Order
  deleteOrder(id: ID!, versionId: ID): ID
  createOrderAddress(id: ID, versionId: ID, countryId: ID, countryStateId: ID, orderId: ID, orderVersionId: ID, salutationId: ID, firstName: String!, lastName: String!, street: String!, zipcode: String!, city: String!, company: String, department: String, title: String, vatId: String, phoneNumber: String, additionalAddressLine1: String, additionalAddressLine2: String, attributes: Json, createdAt: Date, updatedAt: Date, country: InputCountry, countryState: InputCountryState, order: InputOrder, salutation: InputSalutation, orderDeliveries: [InputOrderDelivery]): OrderAddress
  updateOrderAddress(id: ID!, versionId: ID, countryId: ID, countryStateId: ID, orderId: ID, orderVersionId: ID, salutationId: ID, firstName: String, lastName: String, street: String, zipcode: String, city: String, company: String, department: String, title: String, vatId: String, phoneNumber: String, additionalAddressLine1: String, additionalAddressLine2: String, attributes: Json, createdAt: Date, updatedAt: Date, country: InputCountry, countryState: InputCountryState, order: InputOrder, salutation: InputSalutation, orderDeliveries: [InputOrderDelivery]): OrderAddress
  deleteOrderAddress(id: ID!, versionId: ID): ID
  createOrderCustomer(id: ID, versionId: ID, customerId: ID, orderId: ID, orderVersionId: ID, email: String!, salutationId: ID, firstName: String!, lastName: String!, title: String, customerNumber: String, attributes: Json, createdAt: Date, updatedAt: Date, customer: InputCustomer, salutation: InputSalutation): OrderCustomer
  updateOrderCustomer(id: ID!, versionId: ID, customerId: ID, orderId: ID, orderVersionId: ID, email: String, salutationId: ID, firstName: String, lastName: String, title: String, customerNumber: String, attributes: Json, createdAt: Date, updatedAt: Date, customer: InputCustomer, salutation: InputSalutation): OrderCustomer
  deleteOrderCustomer(id: ID!, versionId: ID): ID
  createOrderDelivery(id: ID, versionId: ID, orderId: ID, orderVersionId: ID, shippingOrderAddressId: ID, shippingOrderAddressVersionId: ID, shippingMethodId: ID, stateId: ID, stateMachineState: InputStateMachineState, trackingCode: String, shippingDateEarliest: Date!, shippingDateLatest: Date!, shippingCosts: Json, attributes: Json, createdAt: Date, updatedAt: Date, order: InputOrder, shippingOrderAddress: InputOrderAddress, shippingMethod: InputShippingMethod, positions: [InputOrderDeliveryPosition]): OrderDelivery
  updateOrderDelivery(id: ID!, versionId: ID, orderId: ID, orderVersionId: ID, shippingOrderAddressId: ID, shippingOrderAddressVersionId: ID, shippingMethodId: ID, stateId: ID, stateMachineState: InputStateMachineState, trackingCode: String, shippingDateEarliest: Date, shippingDateLatest: Date, shippingCosts: Json, attributes: Json, createdAt: Date, updatedAt: Date, order: InputOrder, shippingOrderAddress: InputOrderAddress, shippingMethod: InputShippingMethod, positions: [InputOrderDeliveryPosition]): OrderDelivery
  deleteOrderDelivery(id: ID!, versionId: ID): ID
  createOrderDeliveryPosition(id: ID, versionId: ID, orderDeliveryId: ID, orderDeliveryVersionId: ID, orderLineItemId: ID, orderLineItemVersionId: ID, price: Json, unitPrice: Float, totalPrice: Float, quantity: Int, attributes: Json, createdAt: Date, updatedAt: Date, orderDelivery: InputOrderDelivery, orderLineItem: InputOrderLineItem): OrderDeliveryPosition
  updateOrderDeliveryPosition(id: ID!, versionId: ID, orderDeliveryId: ID, orderDeliveryVersionId: ID, orderLineItemId: ID, orderLineItemVersionId: ID, price: Json, unitPrice: Float, totalPrice: Float, quantity: Int, attributes: Json, createdAt: Date, updatedAt: Date, orderDelivery: InputOrderDelivery, orderLineItem: InputOrderLineItem): OrderDeliveryPosition
  deleteOrderDeliveryPosition(id: ID!, versionId: ID): ID
  createOrderLineItem(id: ID, versionId: ID, orderId: ID, orderVersionId: ID, parentId: ID, parentVersionId: ID, identifier: String!, quantity: Int!, label: String!, payload: Json, good: Boolean, removable: Boolean, stackable: Boolean, priority: Int, price: Json!, priceDefinition: Json!, unitPrice: Float, totalPrice: Float, description: String, type: String, attributes: Json, createdAt: Date, updatedAt: Date, order: InputOrder, orderDeliveryPositions: [InputOrderDeliveryPosition], parent: InputOrderLineItem, children: [InputOrderLineItem]): OrderLineItem
  updateOrderLineItem(id: ID!, versionId: ID, orderId: ID, orderVersionId: ID, parentId: ID, parentVersionId: ID, identifier: String, quantity: Int, label: String, payload: Json, good: Boolean, removable: Boolean, stackable: Boolean, priority: Int, price: Json, priceDefinition: Json, unitPrice: Float, totalPrice: Float, description: String, type: String, attributes: Json, createdAt: Date, updatedAt: Date, order: InputOrder, orderDeliveryPositions: [InputOrderDeliveryPosition], parent: InputOrderLineItem, children: [InputOrderLineItem]): OrderLineItem
  deleteOrderLineItem(id: ID!, versionId: ID): ID
  createOrderTransaction(id: ID, versionId: ID, orderId: ID, orderVersionId: ID, paymentMethodId: ID, amount: Json!, stateId: ID, stateMachineState: InputStateMachineState, attributes: Json, createdAt: Date, updatedAt: Date, order: InputOrder, paymentMethod: InputPaymentMethod): OrderTransaction
  updateOrderTransaction(id: ID!, versionId: ID, orderId: ID, orderVersionId: ID, paymentMethodId: ID, amount: Json, stateId: ID, stateMachineState: InputStateMachineState, attributes: Json, createdAt: Date, updatedAt: Date, order: InputOrder, paymentMethod: InputPaymentMethod): OrderTransaction
  deleteOrderTransaction(id: ID!, versionId: ID): ID
  createPaymentMethod(id: ID, pluginId: ID, handlerIdentifier: String, name: String, description: String, position: Int, active: Boolean, attributes: String, availabilityRuleIds: Json, createdAt: Date, updatedAt: Date, salesChannelDefaultAssignments: [InputSalesChannel], plugin: InputPlugin, customers: [InputCustomer], orderTransactions: [InputOrderTransaction], translations: [InputPaymentMethodTranslation], salesChannels: [InputSalesChannel], availabilityRules: [InputRule], translated: Json): PaymentMethod
  updatePaymentMethod(id: ID!, pluginId: ID, handlerIdentifier: String, name: String, description: String, position: Int, active: Boolean, attributes: String, availabilityRuleIds: Json, createdAt: Date, updatedAt: Date, salesChannelDefaultAssignments: [InputSalesChannel], plugin: InputPlugin, customers: [InputCustomer], orderTransactions: [InputOrderTransaction], translations: [InputPaymentMethodTranslation], salesChannels: [InputSalesChannel], availabilityRules: [InputRule], translated: Json): PaymentMethod
  deletePaymentMethod(id: ID!): ID
  createShippingMethod(id: ID, bindShippingfree: Boolean!, name: String, active: Boolean, shippingFree: Float, attributes: String, availabilityRuleId: ID, mediaId: ID, createdAt: Date, updatedAt: Date, deliveryTimeId: ID, deliveryTime: InputDeliveryTime, salesChannelDefaultAssignments: [InputSalesChannel], description: String, orderDeliveries: [InputOrderDelivery], translations: [InputShippingMethodTranslation], salesChannels: [InputSalesChannel], availabilityRule: InputRule, prices: [InputShippingMethodPrice], media: InputMedia, tags: [InputTag], translated: Json): ShippingMethod
  updateShippingMethod(id: ID!, bindShippingfree: Boolean, name: String, active: Boolean, shippingFree: Float, attributes: String, availabilityRuleId: ID, mediaId: ID, createdAt: Date, updatedAt: Date, deliveryTimeId: ID, deliveryTime: InputDeliveryTime, salesChannelDefaultAssignments: [InputSalesChannel], description: String, orderDeliveries: [InputOrderDelivery], translations: [InputShippingMethodTranslation], salesChannels: [InputSalesChannel], availabilityRule: InputRule, prices: [InputShippingMethodPrice], media: InputMedia, tags: [InputTag], translated: Json): ShippingMethod
  deleteShippingMethod(id: ID!): ID
  createShippingMethodPrice(id: ID, shippingMethodId: ID, currencyId: ID, ruleId: ID, calculation: Int, calculationRuleId: ID, quantityStart: Float, quantityEnd: Float, price: Float!, attributes: Json, createdAt: Date, updatedAt: Date, shippingMethod: InputShippingMethod, currency: InputCurrency, rule: InputRule, calculationRule: InputRule): ShippingMethodPrice
  updateShippingMethodPrice(id: ID!, shippingMethodId: ID, currencyId: ID, ruleId: ID, calculation: Int, calculationRuleId: ID, quantityStart: Float, quantityEnd: Float, price: Float, attributes: Json, createdAt: Date, updatedAt: Date, shippingMethod: InputShippingMethod, currency: InputCurrency, rule: InputRule, calculationRule: InputRule): ShippingMethodPrice
  deleteShippingMethodPrice(id: ID!): ID
  createDiscountSurcharge(id: ID, name: String, ruleId: ID, type: String!, amount: Float!, attributes: String, createdAt: Date, updatedAt: Date, translations: [InputDiscountSurchargeTranslation], rule: InputRule, translated: Json): DiscountSurcharge
  updateDiscountSurcharge(id: ID!, name: String, ruleId: ID, type: String, amount: Float, attributes: String, createdAt: Date, updatedAt: Date, translations: [InputDiscountSurchargeTranslation], rule: InputRule, translated: Json): DiscountSurcharge
  deleteDiscountSurcharge(id: ID!): ID
  createPromotion(id: ID, name: String!, active: Boolean, value: Float, percental: Boolean, validFrom: Date, validUntil: Date, redeemable: Int, exclusive: Boolean, priority: Int, excludeLowerPriority: Boolean, personaRuleId: ID, personaRule: InputRule, scopeRuleId: ID, scopeRule: InputRule, discountRuleId: ID, discountRule: InputRule, codeType: String, code: String, promotionSalesChannels: [InputPromotionSalesChannel], discounts: [InputPromotionDiscount]): Promotion
  updatePromotion(id: ID!, name: String, active: Boolean, value: Float, percental: Boolean, validFrom: Date, validUntil: Date, redeemable: Int, exclusive: Boolean, priority: Int, excludeLowerPriority: Boolean, personaRuleId: ID, personaRule: InputRule, scopeRuleId: ID, scopeRule: InputRule, discountRuleId: ID, discountRule: InputRule, codeType: String, code: String, promotionSalesChannels: [InputPromotionSalesChannel], discounts: [InputPromotionDiscount]): Promotion
  deletePromotion(id: ID!): ID
  createPromotionSalesChannel(promotionId: ID, salesChannelId: ID, createdAt: Date, updatedAt: Date, priority: Int!, promotion: InputPromotion, salesChannel: InputSalesChannel): PromotionSalesChannel
  updatePromotionSalesChannel(promotionId: ID!, salesChannelId: ID!, createdAt: Date, updatedAt: Date, priority: Int, promotion: InputPromotion, salesChannel: InputSalesChannel): PromotionSalesChannel
  deletePromotionSalesChannel(promotionId: ID!, salesChannelId: ID!): ID
  createPromotionDiscount(id: ID, promotionId: ID, type: String!, value: Float!, graduated: Boolean!, graduationStep: Int, graduationOrder: String, promotion: InputPromotion, applyTowards: String!): PromotionDiscount
  updatePromotionDiscount(id: ID!, promotionId: ID, type: String, value: Float, graduated: Boolean, graduationStep: Int, graduationOrder: String, promotion: InputPromotion, applyTowards: String): PromotionDiscount
  deletePromotionDiscount(id: ID!): ID
  createSeoUrl(id: ID, salesChannelId: ID, foreignKey: ID, routeName: String!, pathInfo: String!, seoPathInfo: String!, isCanonical: Boolean, isModified: Boolean, isDeleted: Boolean, isValid: Boolean, autoIncrement: Int, attributes: Json, createdAt: Date, updatedAt: Date, salesChannel: InputSalesChannel, url: String): SeoUrl
  updateSeoUrl(id: ID!, salesChannelId: ID, foreignKey: ID, routeName: String, pathInfo: String, seoPathInfo: String, isCanonical: Boolean, isModified: Boolean, isDeleted: Boolean, isValid: Boolean, autoIncrement: Int, attributes: Json, createdAt: Date, updatedAt: Date, salesChannel: InputSalesChannel, url: String): SeoUrl
  deleteSeoUrl(id: ID!): ID
  createSeoUrlTemplate(id: ID, salesChannelId: ID, entityName: String!, routeName: String!, template: String!, isValid: Boolean, createdAt: Date, updatedAt: Date, attributes: Json, salesChannel: InputSalesChannel): SeoUrlTemplate
  updateSeoUrlTemplate(id: ID!, salesChannelId: ID, entityName: String, routeName: String, template: String, isValid: Boolean, createdAt: Date, updatedAt: Date, attributes: Json, salesChannel: InputSalesChannel): SeoUrlTemplate
  deleteSeoUrlTemplate(id: ID!): ID
  createNamed(id: ID, name: String!, optionalGroupId: ID, optionalGroup: InputNamedOptionalGroup): Named
  updateNamed(id: ID!, name: String, optionalGroupId: ID, optionalGroup: InputNamedOptionalGroup): Named
  deleteNamed(id: ID!): ID
  createNamedOptionalGroup(id: ID, name: String!, nameds: [InputNamed]): NamedOptionalGroup
  updateNamedOptionalGroup(id: ID!, name: String, nameds: [InputNamed]): NamedOptionalGroup
  deleteNamedOptionalGroup(id: ID!): ID
  createCalculatedPriceFieldTest(id: ID, versionId: ID, price: Json!): CalculatedPriceFieldTest
  updateCalculatedPriceFieldTest(id: ID!, versionId: ID, price: Json): CalculatedPriceFieldTest
  deleteCalculatedPriceFieldTest(id: ID!, versionId: ID): ID
  createRoot(id: ID, versionId: ID, name: String): Root
  updateRoot(id: ID!, versionId: ID, name: String): Root
  deleteRoot(id: ID!, versionId: ID): ID
  createRootSub(id: ID, versionId: ID, name: String, stock: Int, rootId: ID, rootVersionId: ID, manies: [InputRootSubMany]): RootSub
  updateRootSub(id: ID!, versionId: ID, name: String, stock: Int, rootId: ID, rootVersionId: ID, manies: [InputRootSubMany]): RootSub
  deleteRootSub(id: ID!, versionId: ID): ID
  createRootSubMany(id: ID, versionId: ID, name: String, subId: ID, rootSubVersionId: ID, sub: InputRootSub): RootSubMany
  updateRootSubMany(id: ID!, versionId: ID, name: String, subId: ID, rootSubVersionId: ID, sub: InputRootSub): RootSubMany
  deleteRootSubMany(id: ID!, versionId: ID): ID

  """Dissolves a media folder and puts the content one level higher."""
  dissolveMediaFolder(mediaFolderId: ID!): ID!

  """Provides a unique filename based on the given one."""
  provideFileName(fileName: String!, fileExtension: String!, mediaId: ID): String!

  """Renames the file with the given ID."""
  renameMedia(mediaId: ID!, fileName: String!): Media
}

type Named {
  id: ID!
  name: String!
  optionalGroupId: ID
  optionalGroup: NamedOptionalGroup
}

"""The Result for a search that returns multiple Items"""
type NamedConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [NamedEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

"""Contains the information for one Edge"""
type NamedEdge {
  """The Node of the Edge that contains the real element"""
  node: Named

  """The cursor to the Item of the Edge"""
  cursor: ID
}

type NamedOptionalGroup {
  id: ID!
  name: String!
  nameds(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): NamedConnection
}

"""The Result for a search that returns multiple Items"""
type NamedOptionalGroupConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [NamedOptionalGroupEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

"""Contains the information for one Edge"""
type NamedOptionalGroupEdge {
  """The Node of the Edge that contains the real element"""
  node: NamedOptionalGroup

  """The cursor to the Item of the Edge"""
  cursor: ID
}

type Navigation {
  id: ID!
  versionId: ID!
  parentId: ID
  parentVersionId: ID!
  categoryId: ID
  categoryVersionId: ID
  category: Category
  cmsPageId: ID
  cmsPage: CmsPage
  name: String
  slotConfig: String
  level: Int
  path: String
  childCount: Int
  createdAt: Date!
  updatedAt: Date!
  translations: NavigationTranslationConnection!
  children(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): NavigationConnection
  parent: Navigation
  salesChannelNavigations(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): SalesChannelConnection
  translated: Json
}

"""The Result for a search that returns multiple Items"""
type NavigationConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [NavigationEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

"""Contains the information for one Edge"""
type NavigationEdge {
  """The Node of the Edge that contains the real element"""
  node: Navigation

  """The cursor to the Item of the Edge"""
  cursor: ID
}

type NavigationTranslation {
  name: String!
  slotConfig: Json
  navigationId: ID!
  languageId: ID!
  createdAt: Date!
  updatedAt: Date!
  navigation: Navigation
  language: Language
  navigationVersionId: ID!
}

"""The Result for a search that returns multiple Items"""
type NavigationTranslationConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [NavigationTranslationEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

"""Contains the information for one Edge"""
type NavigationTranslationEdge {
  """The Node of the Edge that contains the real element"""
  node: NavigationTranslation

  """The cursor to the Item of the Edge"""
  cursor: ID
}

type NewsletterReceiver {
  id: ID!
  email: String!
  firstName: String
  lastName: String
  zipCode: String
  city: String
  street: String
  status: String
  attributes: Json
  createdAt: Date!
  updatedAt: Date!
  salutationId: ID!
  salutation: Salutation!
  languageId: ID!
  language: Language!
  salesChannelId: ID!
  salesChannel: SalesChannel!
}

"""The Result for a search that returns multiple Items"""
type NewsletterReceiverConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [NewsletterReceiverEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

"""Contains the information for one Edge"""
type NewsletterReceiverEdge {
  """The Node of the Edge that contains the real element"""
  node: NewsletterReceiver

  """The cursor to the Item of the Edge"""
  cursor: ID
}

type NumberRange {
  id: ID!
  typeId: ID!
  global: Boolean!
  name: String
  description: String
  pattern: String!
  start: Int
  createdAt: Date!
  updatedAt: Date!
  attributes: String
  type: NumberRangeType!
  numberRangeSalesChannels(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): NumberRangeSalesChannelConnection
  translations: NumberRangeTranslationConnection!
  translated: Json
}

"""The Result for a search that returns multiple Items"""
type NumberRangeConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [NumberRangeEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

"""Contains the information for one Edge"""
type NumberRangeEdge {
  """The Node of the Edge that contains the real element"""
  node: NumberRange

  """The cursor to the Item of the Edge"""
  cursor: ID
}

type NumberRangeSalesChannel {
  id: ID!
  numberRangeId: ID!
  salesChannelId: ID!
  numberRangeTypeId: ID
  numberRange: NumberRange
  salesChannel: SalesChannel
  numberRangeType: NumberRangeType
}

"""The Result for a search that returns multiple Items"""
type NumberRangeSalesChannelConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [NumberRangeSalesChannelEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

"""Contains the information for one Edge"""
type NumberRangeSalesChannelEdge {
  """The Node of the Edge that contains the real element"""
  node: NumberRangeSalesChannel

  """The cursor to the Item of the Edge"""
  cursor: ID
}

type NumberRangeState {
  id: ID!
  numberRangeId: ID!
  lastValue: Int!
}

"""The Result for a search that returns multiple Items"""
type NumberRangeStateConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [NumberRangeStateEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

"""Contains the information for one Edge"""
type NumberRangeStateEdge {
  """The Node of the Edge that contains the real element"""
  node: NumberRangeState

  """The cursor to the Item of the Edge"""
  cursor: ID
}

type NumberRangeTranslation {
  name: String!
  description: String
  attributes: Json
  numberRangeId: ID!
  languageId: ID!
  createdAt: Date!
  updatedAt: Date!
  numberRange: NumberRange
  language: Language
}

"""The Result for a search that returns multiple Items"""
type NumberRangeTranslationConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [NumberRangeTranslationEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

"""Contains the information for one Edge"""
type NumberRangeTranslationEdge {
  """The Node of the Edge that contains the real element"""
  node: NumberRangeTranslation

  """The cursor to the Item of the Edge"""
  cursor: ID
}

type NumberRangeType {
  id: ID!
  technicalName: String
  typeName: String
  global: Boolean!
  attributes: String
  createdAt: Date!
  updatedAt: Date!
  numberRanges(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): NumberRangeConnection
  numberRangeSalesChannels(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): NumberRangeSalesChannelConnection
  translations: NumberRangeTypeTranslationConnection!
  translated: Json
}

"""The Result for a search that returns multiple Items"""
type NumberRangeTypeConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [NumberRangeTypeEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

"""Contains the information for one Edge"""
type NumberRangeTypeEdge {
  """The Node of the Edge that contains the real element"""
  node: NumberRangeType

  """The cursor to the Item of the Edge"""
  cursor: ID
}

type NumberRangeTypeTranslation {
  typeName: String!
  attributes: Json
  numberRangeTypeId: ID!
  languageId: ID!
  createdAt: Date!
  updatedAt: Date!
  numberRangeType: NumberRangeType
  language: Language
}

"""The Result for a search that returns multiple Items"""
type NumberRangeTypeTranslationConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [NumberRangeTypeTranslationEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

"""Contains the information for one Edge"""
type NumberRangeTypeTranslationEdge {
  """The Node of the Edge that contains the real element"""
  node: NumberRangeTypeTranslation

  """The cursor to the Item of the Edge"""
  cursor: ID
}

type Order {
  id: ID!
  versionId: ID!
  autoIncrement: Int
  orderNumber: String
  billingAddressId: ID!
  billingAddressVersionId: ID!
  currencyId: ID!
  salesChannelId: ID!
  orderDate: Date!
  price: Json
  amountTotal: Float
  amountNet: Float
  positionPrice: Float
  taxStatus: String
  shippingCosts: Json
  shippingTotal: Float
  currencyFactor: Float!
  deepLinkCode: String
  stateId: ID!
  stateMachineState: StateMachineState
  attributes: Json
  createdAt: Date!
  updatedAt: Date!
  currency: Currency
  salesChannel: SalesChannel
  addresses(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): OrderAddressConnection
  deliveries(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): OrderDeliveryConnection
  lineItems(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): OrderLineItemConnection
  transactions(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): OrderTransactionConnection
  documents(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): DocumentConnection
  tags(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): TagConnection
}

type OrderAddress {
  id: ID!
  versionId: ID!
  countryId: ID!
  countryStateId: ID
  orderId: ID!
  orderVersionId: ID!
  salutationId: ID!
  firstName: String!
  lastName: String!
  street: String!
  zipcode: String!
  city: String!
  company: String
  department: String
  title: String
  vatId: String
  phoneNumber: String
  additionalAddressLine1: String
  additionalAddressLine2: String
  attributes: Json
  createdAt: Date!
  updatedAt: Date!
  country: Country
  countryState: CountryState
  order: Order
  salutation: Salutation
  orderDeliveries(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): OrderDeliveryConnection
}

"""The Result for a search that returns multiple Items"""
type OrderAddressConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [OrderAddressEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

"""Contains the information for one Edge"""
type OrderAddressEdge {
  """The Node of the Edge that contains the real element"""
  node: OrderAddress

  """The cursor to the Item of the Edge"""
  cursor: ID
}

"""The Result for a search that returns multiple Items"""
type OrderConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [OrderEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

type OrderCustomer {
  id: ID!
  versionId: ID!
  customerId: ID
  orderId: ID!
  orderVersionId: ID!
  email: String!
  salutationId: ID!
  firstName: String!
  lastName: String!
  title: String
  customerNumber: String
  attributes: Json
  createdAt: Date!
  updatedAt: Date!
  customer: Customer
  salutation: Salutation
}

"""The Result for a search that returns multiple Items"""
type OrderCustomerConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [OrderCustomerEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

"""Contains the information for one Edge"""
type OrderCustomerEdge {
  """The Node of the Edge that contains the real element"""
  node: OrderCustomer

  """The cursor to the Item of the Edge"""
  cursor: ID
}

type OrderDelivery {
  id: ID!
  versionId: ID!
  orderId: ID!
  orderVersionId: ID!
  shippingOrderAddressId: ID!
  shippingOrderAddressVersionId: ID!
  shippingMethodId: ID!
  stateId: ID!
  stateMachineState: StateMachineState
  trackingCode: String
  shippingDateEarliest: Date!
  shippingDateLatest: Date!
  shippingCosts: Json
  attributes: Json
  createdAt: Date!
  updatedAt: Date!
  order: Order
  shippingOrderAddress: OrderAddress
  shippingMethod: ShippingMethod
  positions(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): OrderDeliveryPositionConnection
}

"""The Result for a search that returns multiple Items"""
type OrderDeliveryConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [OrderDeliveryEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

"""Contains the information for one Edge"""
type OrderDeliveryEdge {
  """The Node of the Edge that contains the real element"""
  node: OrderDelivery

  """The cursor to the Item of the Edge"""
  cursor: ID
}

type OrderDeliveryPosition {
  id: ID!
  versionId: ID!
  orderDeliveryId: ID!
  orderDeliveryVersionId: ID!
  orderLineItemId: ID!
  orderLineItemVersionId: ID!
  price: Json
  unitPrice: Float
  totalPrice: Float
  quantity: Int
  attributes: Json
  createdAt: Date!
  updatedAt: Date!
  orderDelivery: OrderDelivery
  orderLineItem: OrderLineItem
}

"""The Result for a search that returns multiple Items"""
type OrderDeliveryPositionConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [OrderDeliveryPositionEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

"""Contains the information for one Edge"""
type OrderDeliveryPositionEdge {
  """The Node of the Edge that contains the real element"""
  node: OrderDeliveryPosition

  """The cursor to the Item of the Edge"""
  cursor: ID
}

"""Contains the information for one Edge"""
type OrderEdge {
  """The Node of the Edge that contains the real element"""
  node: Order

  """The cursor to the Item of the Edge"""
  cursor: ID
}

type OrderLineItem {
  id: ID!
  versionId: ID!
  orderId: ID!
  orderVersionId: ID!
  parentId: ID
  parentVersionId: ID!
  identifier: String!
  quantity: Int!
  label: String!
  payload: Json
  good: Boolean
  removable: Boolean
  stackable: Boolean
  priority: Int
  price: Json!
  priceDefinition: Json!
  unitPrice: Float
  totalPrice: Float
  description: String
  type: String
  attributes: Json
  createdAt: Date!
  updatedAt: Date!
  order: Order
  orderDeliveryPositions(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): OrderDeliveryPositionConnection
  parent: OrderLineItem
  children(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): OrderLineItemConnection
}

"""The Result for a search that returns multiple Items"""
type OrderLineItemConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [OrderLineItemEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

"""Contains the information for one Edge"""
type OrderLineItemEdge {
  """The Node of the Edge that contains the real element"""
  node: OrderLineItem

  """The cursor to the Item of the Edge"""
  cursor: ID
}

type OrderTransaction {
  id: ID!
  versionId: ID!
  orderId: ID!
  orderVersionId: ID!
  paymentMethodId: ID!
  amount: Json!
  stateId: ID!
  stateMachineState: StateMachineState
  attributes: Json
  createdAt: Date!
  updatedAt: Date!
  order: Order
  paymentMethod: PaymentMethod
}

"""The Result for a search that returns multiple Items"""
type OrderTransactionConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [OrderTransactionEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

"""Contains the information for one Edge"""
type OrderTransactionEdge {
  """The Node of the Edge that contains the real element"""
  node: OrderTransaction

  """The cursor to the Item of the Edge"""
  cursor: ID
}

"""
Contains information about the current Page fetched from the Connection
"""
type PageInfo {
  """The cursor to the last element in the current Connection"""
  endCursor: ID

  """The cursor to the first element in the current Connection"""
  startCursor: ID

  """Shows if there are more Items"""
  hasNextPage: Boolean

  """Shows if there are previous Items"""
  hasPreviousPage: Boolean
}

input Parameter {
  """The operator used to compare the field and the value"""
  operator: RangeOperator!

  """The value with which the field will be compared"""
  value: Float!
}

type PaymentMethod {
  id: ID!
  pluginId: ID
  handlerIdentifier: String
  name: String
  description: String
  position: Int
  active: Boolean
  attributes: String
  availabilityRuleIds: Json
  createdAt: Date!
  updatedAt: Date!
  salesChannelDefaultAssignments(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): SalesChannelConnection
  plugin: Plugin
  customers(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): CustomerConnection
  orderTransactions(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): OrderTransactionConnection
  translations: PaymentMethodTranslationConnection!
  salesChannels(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): SalesChannelConnection
  availabilityRules(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): RuleConnection
  translated: Json
}

"""The Result for a search that returns multiple Items"""
type PaymentMethodConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [PaymentMethodEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

"""Contains the information for one Edge"""
type PaymentMethodEdge {
  """The Node of the Edge that contains the real element"""
  node: PaymentMethod

  """The cursor to the Item of the Edge"""
  cursor: ID
}

type PaymentMethodTranslation {
  name: String!
  description: String
  attributes: Json
  paymentMethodId: ID!
  languageId: ID!
  createdAt: Date!
  updatedAt: Date!
  paymentMethod: PaymentMethod
  language: Language
}

"""The Result for a search that returns multiple Items"""
type PaymentMethodTranslationConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [PaymentMethodTranslationEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

"""Contains the information for one Edge"""
type PaymentMethodTranslationEdge {
  """The Node of the Edge that contains the real element"""
  node: PaymentMethodTranslation

  """The cursor to the Item of the Edge"""
  cursor: ID
}

type Plugin {
  id: ID!
  name: String!
  composerName: String
  autoload: Json!
  active: Boolean
  managedByComposer: Boolean
  path: String
  author: String
  copyright: String
  license: String
  version: String!
  upgradeVersion: String
  installedAt: Date
  upgradedAt: Date
  icon: String
  label: String
  description: String
  manufacturerLink: String
  supportLink: String
  changelog: String
  attributes: String
  createdAt: Date!
  updatedAt: Date!
  translations: PluginTranslationConnection!
  paymentMethods(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): PaymentMethodConnection
  translated: Json
}

"""The Result for a search that returns multiple Items"""
type PluginConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [PluginEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

"""Contains the information for one Edge"""
type PluginEdge {
  """The Node of the Edge that contains the real element"""
  node: Plugin

  """The cursor to the Item of the Edge"""
  cursor: ID
}

type PluginTranslation {
  label: String!
  description: String
  manufacturerLink: String
  supportLink: String
  changelog: Json
  attributes: Json
  pluginId: ID!
  languageId: ID!
  createdAt: Date!
  updatedAt: Date!
  plugin: Plugin
  language: Language
}

"""The Result for a search that returns multiple Items"""
type PluginTranslationConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [PluginTranslationEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

"""Contains the information for one Edge"""
type PluginTranslationEdge {
  """The Node of the Edge that contains the real element"""
  node: PluginTranslation

  """The cursor to the Item of the Edge"""
  cursor: ID
}

type Product {
  id: ID!
  versionId: ID!
  parentId: ID
  parentVersionId: ID!
  blacklistIds: Json
  whitelistIds: Json
  autoIncrement: Int
  active: Boolean
  stock: Int!
  createdAt: Date!
  updatedAt: Date!
  manufacturerId: ID!
  productManufacturerVersionId: ID!
  unitId: ID
  taxId: ID!
  coverId: ID
  productMediaVersionId: ID
  price: Json!
  listingPrices: Json
  manufacturerNumber: String
  ean: String
  productNumber: String
  isCloseout: Boolean
  purchaseSteps: Int
  maxPurchase: Int
  minPurchase: Int
  purchaseUnit: Float
  referenceUnit: Float
  shippingFree: Boolean
  purchasePrice: Float
  markAsTopseller: Boolean
  weight: Float
  width: Float
  height: Float
  length: Float
  releaseDate: Date
  categoryTree: Json
  propertyIds: Json
  optionIds: Json
  minDeliveryTime: Int
  maxDeliveryTime: Int
  restockTime: Int
  tagIds: Json
  additionalText: String
  name: String
  keywords: String
  description: String
  metaTitle: String
  packUnit: String
  attributes: String
  parent: Product
  children(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): ProductConnection
  tax: Tax
  manufacturer: ProductManufacturer
  unit: Unit
  cover: ProductMedia
  prices(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): ProductPriceConnection
  media(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): ProductMediaConnection
  properties(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): PropertyGroupOptionConnection
  categories(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): CategoryConnection
  tags(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): TagConnection
  searchKeywords(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): SearchDocumentConnection
  categoriesRo(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): CategoryConnection
  translations: ProductTranslationConnection!
  configuratorSettings(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): ProductConfiguratorSettingConnection
  options(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): PropertyGroupOptionConnection
  visibilities(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): ProductVisibilityConnection
  translated: Json
  canonicalUrl: SeoUrl
  seoUrls(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): SeoUrlConnection
}

type ProductConfiguratorSetting {
  id: ID!
  versionId: ID!
  productId: ID!
  productVersionId: ID!
  optionId: ID!
  price: Json
  prices: Json
  createdAt: Date!
  updatedAt: Date!
  product: Product
  option: PropertyGroupOption
  attributes: Json
}

"""The Result for a search that returns multiple Items"""
type ProductConfiguratorSettingConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [ProductConfiguratorSettingEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

"""Contains the information for one Edge"""
type ProductConfiguratorSettingEdge {
  """The Node of the Edge that contains the real element"""
  node: ProductConfiguratorSetting

  """The cursor to the Item of the Edge"""
  cursor: ID
}

"""The Result for a search that returns multiple Items"""
type ProductConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [ProductEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

"""Contains the information for one Edge"""
type ProductEdge {
  """The Node of the Edge that contains the real element"""
  node: Product

  """The cursor to the Item of the Edge"""
  cursor: ID
}

type ProductManufacturer {
  id: ID!
  versionId: ID!
  mediaId: ID
  link: String
  updatedAt: Date!
  createdAt: Date!
  name: String
  description: String
  attributes: String
  media: Media
  products(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): ProductConnection
  translations: ProductManufacturerTranslationConnection!
  translated: Json
}

"""The Result for a search that returns multiple Items"""
type ProductManufacturerConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [ProductManufacturerEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

"""Contains the information for one Edge"""
type ProductManufacturerEdge {
  """The Node of the Edge that contains the real element"""
  node: ProductManufacturer

  """The cursor to the Item of the Edge"""
  cursor: ID
}

type ProductManufacturerTranslation {
  name: String!
  description: String
  attributes: Json
  productManufacturerId: ID!
  languageId: ID!
  createdAt: Date!
  updatedAt: Date!
  productManufacturer: ProductManufacturer
  language: Language
  productManufacturerVersionId: ID!
}

"""The Result for a search that returns multiple Items"""
type ProductManufacturerTranslationConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [ProductManufacturerTranslationEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

"""Contains the information for one Edge"""
type ProductManufacturerTranslationEdge {
  """The Node of the Edge that contains the real element"""
  node: ProductManufacturerTranslation

  """The cursor to the Item of the Edge"""
  cursor: ID
}

type ProductMedia {
  id: ID!
  versionId: ID!
  productId: ID!
  productVersionId: ID!
  mediaId: ID!
  position: Int
  createdAt: Date!
  updatedAt: Date!
  product: Product
  media: Media
  attributes: Json
}

"""The Result for a search that returns multiple Items"""
type ProductMediaConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [ProductMediaEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

"""Contains the information for one Edge"""
type ProductMediaEdge {
  """The Node of the Edge that contains the real element"""
  node: ProductMedia

  """The cursor to the Item of the Edge"""
  cursor: ID
}

type ProductPrice {
  id: ID!
  versionId: ID!
  productId: ID!
  productVersionId: ID!
  currencyId: ID!
  ruleId: ID!
  price: Json!
  quantityStart: Int!
  quantityEnd: Int
  createdAt: Date!
  updatedAt: Date!
  product: Product
  currency: Currency
  rule: Rule
  attributes: Json
}

"""The Result for a search that returns multiple Items"""
type ProductPriceConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [ProductPriceEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

"""Contains the information for one Edge"""
type ProductPriceEdge {
  """The Node of the Edge that contains the real element"""
  node: ProductPrice

  """The cursor to the Item of the Edge"""
  cursor: ID
}

type ProductStream {
  id: ID!
  apiFilter: Json
  invalid: Boolean
  createdAt: Date!
  updatedAt: Date!
  name: String
  description: String
  attributes: String
  translations: ProductStreamTranslationConnection!
  filters(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): ProductStreamFilterConnection
  translated: Json
}

"""The Result for a search that returns multiple Items"""
type ProductStreamConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [ProductStreamEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

"""Contains the information for one Edge"""
type ProductStreamEdge {
  """The Node of the Edge that contains the real element"""
  node: ProductStream

  """The cursor to the Item of the Edge"""
  cursor: ID
}

type ProductStreamFilter {
  id: ID!
  productStreamId: ID!
  parentId: ID
  type: String!
  field: String
  operator: String
  value: String
  parameters: Json
  position: Int
  createdAt: Date!
  updatedAt: Date!
  productStream: ProductStream
  parent: ProductStreamFilter
  queries(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): ProductStreamFilterConnection
  attributes: Json
}

"""The Result for a search that returns multiple Items"""
type ProductStreamFilterConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [ProductStreamFilterEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

"""Contains the information for one Edge"""
type ProductStreamFilterEdge {
  """The Node of the Edge that contains the real element"""
  node: ProductStreamFilter

  """The cursor to the Item of the Edge"""
  cursor: ID
}

type ProductStreamTranslation {
  name: String!
  description: String
  attributes: Json
  productStreamId: ID!
  languageId: ID!
  createdAt: Date!
  updatedAt: Date!
  productStream: ProductStream
  language: Language
}

"""The Result for a search that returns multiple Items"""
type ProductStreamTranslationConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [ProductStreamTranslationEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

"""Contains the information for one Edge"""
type ProductStreamTranslationEdge {
  """The Node of the Edge that contains the real element"""
  node: ProductStreamTranslation

  """The cursor to the Item of the Edge"""
  cursor: ID
}

type ProductTranslation {
  additionalText: String
  name: String
  keywords: String
  description: String
  metaTitle: String
  packUnit: String
  attributes: Json
  productId: ID!
  languageId: ID!
  createdAt: Date!
  updatedAt: Date!
  product: Product
  language: Language
  productVersionId: ID!
}

"""The Result for a search that returns multiple Items"""
type ProductTranslationConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [ProductTranslationEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

"""Contains the information for one Edge"""
type ProductTranslationEdge {
  """The Node of the Edge that contains the real element"""
  node: ProductTranslation

  """The cursor to the Item of the Edge"""
  cursor: ID
}

type ProductVisibility {
  id: ID!
  productId: ID!
  productVersionId: ID!
  salesChannelId: ID!
  visibility: Int!
  salesChannel: SalesChannel
  product: Product
  createdAt: Date!
  updatedAt: Date!
}

"""The Result for a search that returns multiple Items"""
type ProductVisibilityConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [ProductVisibilityEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

"""Contains the information for one Edge"""
type ProductVisibilityEdge {
  """The Node of the Edge that contains the real element"""
  node: ProductVisibility

  """The cursor to the Item of the Edge"""
  cursor: ID
}

type Promotion {
  id: ID!
  name: String!
  active: Boolean
  value: Float
  percental: Boolean
  validFrom: Date
  validUntil: Date
  redeemable: Int
  exclusive: Boolean
  priority: Int
  excludeLowerPriority: Boolean
  personaRuleId: ID
  personaRule: Rule
  scopeRuleId: ID
  scopeRule: Rule
  discountRuleId: ID
  discountRule: Rule
  codeType: String
  code: String
  promotionSalesChannels(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): PromotionSalesChannelConnection
  discounts(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): PromotionDiscountConnection
}

"""The Result for a search that returns multiple Items"""
type PromotionConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [PromotionEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

type PromotionDiscount {
  id: ID!
  promotionId: ID!
  type: String!
  value: Float!
  graduated: Boolean!
  graduationStep: Int
  graduationOrder: String
  promotion: Promotion
  applyTowards: String!
}

"""The Result for a search that returns multiple Items"""
type PromotionDiscountConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [PromotionDiscountEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

"""Contains the information for one Edge"""
type PromotionDiscountEdge {
  """The Node of the Edge that contains the real element"""
  node: PromotionDiscount

  """The cursor to the Item of the Edge"""
  cursor: ID
}

"""Contains the information for one Edge"""
type PromotionEdge {
  """The Node of the Edge that contains the real element"""
  node: Promotion

  """The cursor to the Item of the Edge"""
  cursor: ID
}

type PromotionSalesChannel {
  promotionId: ID!
  salesChannelId: ID!
  createdAt: Date!
  updatedAt: Date!
  priority: Int!
  promotion: Promotion
  salesChannel: SalesChannel
}

"""The Result for a search that returns multiple Items"""
type PromotionSalesChannelConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [PromotionSalesChannelEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

"""Contains the information for one Edge"""
type PromotionSalesChannelEdge {
  """The Node of the Edge that contains the real element"""
  node: PromotionSalesChannel

  """The cursor to the Item of the Edge"""
  cursor: ID
}

type PropertyGroup {
  id: ID!
  name: String
  description: String
  displayType: String!
  sortingType: String!
  attributes: String
  createdAt: Date!
  updatedAt: Date!
  options(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): PropertyGroupOptionConnection
  translations: PropertyGroupTranslationConnection!
  translated: Json
}

"""The Result for a search that returns multiple Items"""
type PropertyGroupConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [PropertyGroupEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

"""Contains the information for one Edge"""
type PropertyGroupEdge {
  """The Node of the Edge that contains the real element"""
  node: PropertyGroup

  """The cursor to the Item of the Edge"""
  cursor: ID
}

type PropertyGroupOption {
  id: ID!
  groupId: ID!
  name: String
  position: String
  colorHexCode: String
  mediaId: ID
  attributes: String
  createdAt: Date!
  updatedAt: Date!
  media: Media
  group: PropertyGroup
  translations: PropertyGroupOptionTranslationConnection!
  productConfiguratorSettings(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): ProductConfiguratorSettingConnection
  productProperties(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): ProductConnection
  productOptions(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): ProductConnection
  translated: Json
}

"""The Result for a search that returns multiple Items"""
type PropertyGroupOptionConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [PropertyGroupOptionEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

"""Contains the information for one Edge"""
type PropertyGroupOptionEdge {
  """The Node of the Edge that contains the real element"""
  node: PropertyGroupOption

  """The cursor to the Item of the Edge"""
  cursor: ID
}

type PropertyGroupOptionTranslation {
  name: String!
  position: Int
  attributes: Json
  propertyGroupOptionId: ID!
  languageId: ID!
  createdAt: Date!
  updatedAt: Date!
  propertyGroupOption: PropertyGroupOption
  language: Language
}

"""The Result for a search that returns multiple Items"""
type PropertyGroupOptionTranslationConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [PropertyGroupOptionTranslationEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

"""Contains the information for one Edge"""
type PropertyGroupOptionTranslationEdge {
  """The Node of the Edge that contains the real element"""
  node: PropertyGroupOptionTranslation

  """The cursor to the Item of the Edge"""
  cursor: ID
}

type PropertyGroupTranslation {
  name: String!
  description: String
  attributes: Json
  propertyGroupId: ID!
  languageId: ID!
  createdAt: Date!
  updatedAt: Date!
  propertyGroup: PropertyGroup
  language: Language
}

"""The Result for a search that returns multiple Items"""
type PropertyGroupTranslationConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [PropertyGroupTranslationEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

"""Contains the information for one Edge"""
type PropertyGroupTranslationEdge {
  """The Node of the Edge that contains the real element"""
  node: PropertyGroupTranslation

  """The cursor to the Item of the Edge"""
  cursor: ID
}

type Query {
  attribute(id: ID!): Attribute
  attributes(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): AttributeConnection
  attributeSet(id: ID!): AttributeSet
  attributeSets(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): AttributeSetConnection
  attributeSetRelation(id: ID!): AttributeSetRelation
  attributeSetRelations(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): AttributeSetRelationConnection
  version(id: ID!): Version
  versions(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): VersionConnection
  versionCommit(id: ID!): VersionCommit
  versionCommits(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): VersionCommitConnection
  versionCommitData(id: ID!): VersionCommitData
  versionCommitDatas(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): VersionCommitDataConnection
  eventAction(id: ID!): EventAction
  eventActions(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): EventActionConnection
  deadMessage(id: ID!): DeadMessage
  deadMessages(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): DeadMessageConnection
  messageQueueStats(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): MessageQueueStatsConnection
  plugin(id: ID!): Plugin
  plugins(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): PluginConnection
  scheduledTask(id: ID!): ScheduledTask
  scheduledTasks(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): ScheduledTaskConnection
  tag(id: ID!): Tag
  tags(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): TagConnection
  storeSettings(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): StoreSettingsConnection
  language(id: ID!): Language
  languages(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): LanguageConnection
  salesChannel(id: ID!): SalesChannel
  salesChannels(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): SalesChannelConnection
  salesChannelDomain(id: ID!): SalesChannelDomain
  salesChannelDomains(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): SalesChannelDomainConnection
  salesChannelType(id: ID!): SalesChannelType
  salesChannelTypes(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): SalesChannelTypeConnection
  country(id: ID!): Country
  countries(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): CountryConnection
  countryState(id: ID!): CountryState
  countryStates(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): CountryStateConnection
  currency(id: ID!): Currency
  currencies(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): CurrencyConnection
  locale(id: ID!): Locale
  locales(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): LocaleConnection
  snippetSet(id: ID!): SnippetSet
  snippetSets(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): SnippetSetConnection
  snippet(id: ID!): Snippet
  snippets(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): SnippetConnection
  salutation(id: ID!): Salutation
  salutations(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): SalutationConnection
  tax(id: ID!): Tax
  taxes(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): TaxConnection
  unit(id: ID!): Unit
  units(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): UnitConnection
  user(id: ID!): User
  users(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): UserConnection
  userAccessKey(id: ID!): UserAccessKey
  userAccessKeys(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): UserAccessKeyConnection
  userRecovery(id: ID!): UserRecovery
  userRecoveries(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): UserRecoveryConnection
  integration(id: ID!): Integration
  integrations(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): IntegrationConnection
  stateMachine(id: ID!): StateMachine
  stateMachines(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): StateMachineConnection
  stateMachineState(id: ID!): StateMachineState
  stateMachineStates(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): StateMachineStateConnection
  stateMachineTransition(id: ID!): StateMachineTransition
  stateMachineTransitions(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): StateMachineTransitionConnection
  stateMachineHistory(id: ID!): StateMachineHistory
  stateMachineHistories(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): StateMachineHistoryConnection
  systemConfig(id: ID!): SystemConfig
  systemConfigs(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): SystemConfigConnection
  numberRange(id: ID!): NumberRange
  numberRanges(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): NumberRangeConnection
  numberRangeSalesChannel(id: ID!): NumberRangeSalesChannel
  numberRangeSalesChannels(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): NumberRangeSalesChannelConnection
  numberRangeState(id: ID!): NumberRangeState
  numberRangeStates(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): NumberRangeStateConnection
  numberRangeType(id: ID!): NumberRangeType
  numberRangeTypes(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): NumberRangeTypeConnection
  category(id: ID!, versionId: ID): Category
  categories(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): CategoryConnection
  media(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): MediaConnection
  mediaDefaultFolder(id: ID!): MediaDefaultFolder
  mediaDefaultFolders(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): MediaDefaultFolderConnection
  mediaThumbnail(id: ID!): MediaThumbnail
  mediaThumbnails(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): MediaThumbnailConnection
  mediaFolder(id: ID!): MediaFolder
  mediaFolders(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): MediaFolderConnection
  mediaThumbnailSize(id: ID!): MediaThumbnailSize
  mediaThumbnailSizes(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): MediaThumbnailSizeConnection
  mediaFolderConfiguration(id: ID!): MediaFolderConfiguration
  mediaFolderConfigurations(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): MediaFolderConfigurationConnection
  product(id: ID!, versionId: ID): Product
  products(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): ProductConnection
  productConfiguratorSetting(id: ID!, versionId: ID): ProductConfiguratorSetting
  productConfiguratorSettings(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): ProductConfiguratorSettingConnection
  productPrice(id: ID!, versionId: ID): ProductPrice
  productPrices(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): ProductPriceConnection
  productManufacturer(id: ID!, versionId: ID): ProductManufacturer
  productManufacturers(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): ProductManufacturerConnection
  productMedia(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): ProductMediaConnection
  searchDocument(id: ID!, languageId: ID!, entityId: ID!): SearchDocument
  searchDocuments(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): SearchDocumentConnection
  productVisibility(id: ID!): ProductVisibility
  productVisibilities(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): ProductVisibilityConnection
  deliveryTime(id: ID!): DeliveryTime
  deliveryTimes(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): DeliveryTimeConnection
  navigation(id: ID!, versionId: ID): Navigation
  navigations(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): NavigationConnection
  newsletterReceiver(id: ID!): NewsletterReceiver
  newsletterReceivers(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): NewsletterReceiverConnection
  rule(id: ID!): Rule
  rules(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): RuleConnection
  ruleCondition(id: ID!): RuleCondition
  ruleConditions(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): RuleConditionConnection
  productStream(id: ID!): ProductStream
  productStreams(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): ProductStreamConnection
  productStreamFilter(id: ID!): ProductStreamFilter
  productStreamFilters(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): ProductStreamFilterConnection
  propertyGroup(id: ID!): PropertyGroup
  propertyGroups(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): PropertyGroupConnection
  propertyGroupOption(id: ID!): PropertyGroupOption
  propertyGroupOptions(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): PropertyGroupOptionConnection
  cmsPage(id: ID!): CmsPage
  cmsPages(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): CmsPageConnection
  cmsBlock(id: ID!): CmsBlock
  cmsBlocks(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): CmsBlockConnection
  cmsSlot(id: ID!, versionId: ID): CmsSlot
  cmsSlots(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): CmsSlotConnection
  mailTemplate(id: ID!): MailTemplate
  mailTemplates(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): MailTemplateConnection
  mailHeaderFooter(id: ID!): MailHeaderFooter
  mailHeaderFooters(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): MailHeaderFooterConnection
  customer(id: ID!): Customer
  customers(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): CustomerConnection
  customerAddress(id: ID!): CustomerAddress
  customerAddresses(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): CustomerAddressConnection
  customerGroup(id: ID!): CustomerGroup
  customerGroups(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): CustomerGroupConnection
  order(id: ID!, versionId: ID): Order
  orders(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): OrderConnection
  orderAddress(id: ID!, versionId: ID): OrderAddress
  orderAddresses(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): OrderAddressConnection
  orderCustomer(id: ID!, versionId: ID): OrderCustomer
  orderCustomers(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): OrderCustomerConnection
  orderDelivery(id: ID!, versionId: ID): OrderDelivery
  orderDeliveries(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): OrderDeliveryConnection
  orderDeliveryPosition(id: ID!, versionId: ID): OrderDeliveryPosition
  orderDeliveryPositions(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): OrderDeliveryPositionConnection
  orderLineItem(id: ID!, versionId: ID): OrderLineItem
  orderLineItems(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): OrderLineItemConnection
  orderTransaction(id: ID!, versionId: ID): OrderTransaction
  orderTransactions(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): OrderTransactionConnection
  paymentMethod(id: ID!): PaymentMethod
  paymentMethods(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): PaymentMethodConnection
  shippingMethod(id: ID!): ShippingMethod
  shippingMethods(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): ShippingMethodConnection
  shippingMethodPrice(id: ID!): ShippingMethodPrice
  shippingMethodPrices(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): ShippingMethodPriceConnection
  discountSurcharge(id: ID!): DiscountSurcharge
  discountSurcharges(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): DiscountSurchargeConnection
  promotion(id: ID!): Promotion
  promotions(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): PromotionConnection
  promotionSalesChannel(promotionId: ID!, salesChannelId: ID!): PromotionSalesChannel
  promotionSalesChannels(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): PromotionSalesChannelConnection
  promotionDiscount(id: ID!): PromotionDiscount
  promotionDiscounts(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): PromotionDiscountConnection
  seoUrl(id: ID!): SeoUrl
  seoUrls(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): SeoUrlConnection
  seoUrlTemplate(id: ID!): SeoUrlTemplate
  seoUrlTemplates(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): SeoUrlTemplateConnection
  named(id: ID!): Named
  nameds(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): NamedConnection
  namedOptionalGroup(id: ID!): NamedOptionalGroup
  namedOptionalGroups(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): NamedOptionalGroupConnection
  calculatedPriceFieldTest(id: ID!, versionId: ID): CalculatedPriceFieldTest
  calculatedPriceFieldTests(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): CalculatedPriceFieldTestConnection
  root(id: ID!, versionId: ID): Root
  roots(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): RootConnection
  rootSub(id: ID!, versionId: ID): RootSub
  rootSubs(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): RootSubConnection
  rootSubMany(id: ID!, versionId: ID): RootSubMany
  rootSubManies(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): RootSubManyConnection

  """Generates access keys for integrations."""
  generateIntegrationKey: IntegrationAccessKey

  """Generates the access key for a sales channel."""
  generateSalesChannelKey: ID!

  """Generates the access keys for a user."""
  generateUserKey: KeyPair
}

"""The possible operators to combine queries"""
enum QueryOperator {
  """
  Combines the queries using logical "and"
  """
  AND

  """
  Combines the queries using logical "or"
  """
  OR
}

"""The QueryTypes the DAL can perform"""
enum QueryTypes {
  """Performs an equals query"""
  equals

  """Performs a contains query"""
  contains

  """Performs an equalsAny query"""
  equalsAny

  """Combines multiple queries"""
  multi

  """Inverts an query"""
  not

  """Performs a range query"""
  range
}

"""The possible operators for range queries"""
enum RangeOperator {
  """Greater than or equals"""
  GTE

  """Greater than"""
  GT

  """Less than or equals"""
  LTE

  """Less than"""
  LT
}

type Root {
  id: ID!
  versionId: ID!
  name: String
}

"""The Result for a search that returns multiple Items"""
type RootConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [RootEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

"""Contains the information for one Edge"""
type RootEdge {
  """The Node of the Edge that contains the real element"""
  node: Root

  """The cursor to the Item of the Edge"""
  cursor: ID
}

type RootSub {
  id: ID!
  versionId: ID!
  name: String
  stock: Int
  rootId: ID
  rootVersionId: ID!
  manies(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): RootSubManyConnection
}

"""The Result for a search that returns multiple Items"""
type RootSubConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [RootSubEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

"""Contains the information for one Edge"""
type RootSubEdge {
  """The Node of the Edge that contains the real element"""
  node: RootSub

  """The cursor to the Item of the Edge"""
  cursor: ID
}

type RootSubMany {
  id: ID!
  versionId: ID!
  name: String
  subId: ID!
  rootSubVersionId: ID!
  sub: RootSub
}

"""The Result for a search that returns multiple Items"""
type RootSubManyConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [RootSubManyEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

"""Contains the information for one Edge"""
type RootSubManyEdge {
  """The Node of the Edge that contains the real element"""
  node: RootSubMany

  """The cursor to the Item of the Edge"""
  cursor: ID
}

type Rule {
  id: ID!
  name: String!
  priority: Int!
  description: String
  invalid: Boolean
  attributes: Json
  createdAt: Date!
  updatedAt: Date!
  moduleTypes: Json
  conditions(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): RuleConditionConnection
  discountSurcharges(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): DiscountSurchargeConnection
  productPrices(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): ProductPriceConnection
  shippingMethodPrices(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): ShippingMethodPriceConnection
  shippingMethodPriceCalculations(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): ShippingMethodPriceConnection
  shippingMethods(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): ShippingMethodConnection
  paymentMethods(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): PaymentMethodConnection
  personaPromotions(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): PromotionConnection
  scopePromotions(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): PromotionConnection
  discountPromotions(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): PromotionConnection
}

type RuleCondition {
  id: ID!
  type: String
  ruleId: ID!
  parentId: ID
  value: Json
  position: Int
  rule: Rule
  parent: RuleCondition
  children(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): RuleConditionConnection
  attributes: Json
}

"""The Result for a search that returns multiple Items"""
type RuleConditionConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [RuleConditionEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

"""Contains the information for one Edge"""
type RuleConditionEdge {
  """The Node of the Edge that contains the real element"""
  node: RuleCondition

  """The cursor to the Item of the Edge"""
  cursor: ID
}

"""The Result for a search that returns multiple Items"""
type RuleConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [RuleEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

"""Contains the information for one Edge"""
type RuleEdge {
  """The Node of the Edge that contains the real element"""
  node: Rule

  """The cursor to the Item of the Edge"""
  cursor: ID
}

type SalesChannel {
  id: ID!
  typeId: ID!
  languageId: ID!
  customerGroupId: ID!
  currencyId: ID!
  paymentMethodId: ID!
  shippingMethodId: ID!
  countryId: ID!
  navigationId: ID
  navigationVersionId: ID
  mailHeaderFooterId: ID
  type: SalesChannelType
  name: String
  shortName: String
  accessKey: String!
  configuration: Json
  active: Boolean
  taxCalculationType: String
  attributes: String
  createdAt: Date!
  updatedAt: Date!
  translations: SalesChannelTranslationConnection!
  currencies(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): CurrencyConnection
  languages(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): LanguageConnection
  countries(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): CountryConnection
  paymentMethods(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): PaymentMethodConnection
  shippingMethods(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): ShippingMethodConnection
  language: Language
  customerGroup: CustomerGroup
  currency: Currency
  paymentMethod: PaymentMethod
  shippingMethod: ShippingMethod
  country: Country
  orders(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): OrderConnection
  customers(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): CustomerConnection
  domains(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): SalesChannelDomainConnection
  systemConfigs(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): SystemConfigConnection
  navigation: Navigation
  productVisibilities(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): ProductVisibilityConnection
  mailHeaderFooter: MailHeaderFooter
  newsletterReceivers(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): NewsletterReceiverConnection
  mailTemplates(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): MailTemplateConnection
  numberRangeSalesChannels(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): NumberRangeSalesChannelConnection
  promotionSalesChannels(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): PromotionSalesChannelConnection
  translated: Json
  seoUrls(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): SeoUrlConnection
  seoUrlTemplates(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): SeoUrlTemplateConnection
}

"""The Result for a search that returns multiple Items"""
type SalesChannelConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [SalesChannelEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

type SalesChannelDomain {
  id: ID!
  url: String!
  salesChannelId: ID!
  languageId: ID!
  currencyId: ID!
  snippetSetId: ID!
  createdAt: Date!
  updatedAt: Date!
  salesChannel: SalesChannel
  language: Language
  currency: Currency
  snippetSet: SnippetSet
  attributes: Json
}

"""The Result for a search that returns multiple Items"""
type SalesChannelDomainConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [SalesChannelDomainEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

"""Contains the information for one Edge"""
type SalesChannelDomainEdge {
  """The Node of the Edge that contains the real element"""
  node: SalesChannelDomain

  """The cursor to the Item of the Edge"""
  cursor: ID
}

"""Contains the information for one Edge"""
type SalesChannelEdge {
  """The Node of the Edge that contains the real element"""
  node: SalesChannel

  """The cursor to the Item of the Edge"""
  cursor: ID
}

type SalesChannelTranslation {
  name: String!
  attributes: Json
  salesChannelId: ID!
  languageId: ID!
  createdAt: Date!
  updatedAt: Date!
  salesChannel: SalesChannel
  language: Language
}

"""The Result for a search that returns multiple Items"""
type SalesChannelTranslationConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [SalesChannelTranslationEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

"""Contains the information for one Edge"""
type SalesChannelTranslationEdge {
  """The Node of the Edge that contains the real element"""
  node: SalesChannelTranslation

  """The cursor to the Item of the Edge"""
  cursor: ID
}

type SalesChannelType {
  id: ID!
  coverUrl: String
  iconName: String
  screenshotUrls: Json
  name: String
  manufacturer: String
  description: String
  descriptionLong: String
  attributes: String
  createdAt: Date!
  updatedAt: Date!
  translations: SalesChannelTypeTranslationConnection!
  salesChannels(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): SalesChannelConnection
  translated: Json
}

"""The Result for a search that returns multiple Items"""
type SalesChannelTypeConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [SalesChannelTypeEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

"""Contains the information for one Edge"""
type SalesChannelTypeEdge {
  """The Node of the Edge that contains the real element"""
  node: SalesChannelType

  """The cursor to the Item of the Edge"""
  cursor: ID
}

type SalesChannelTypeTranslation {
  name: String!
  manufacturer: String
  description: String
  descriptionLong: String
  attributes: Json
  salesChannelTypeId: ID!
  languageId: ID!
  createdAt: Date!
  updatedAt: Date!
  salesChannelType: SalesChannelType
  language: Language
}

"""The Result for a search that returns multiple Items"""
type SalesChannelTypeTranslationConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [SalesChannelTypeTranslationEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

"""Contains the information for one Edge"""
type SalesChannelTypeTranslationEdge {
  """The Node of the Edge that contains the real element"""
  node: SalesChannelTypeTranslation

  """The cursor to the Item of the Edge"""
  cursor: ID
}

type Salutation {
  id: ID!
  salutationKey: String!
  displayName: String
  letterName: String
  createdAt: Date!
  updatedAt: Date!
  translations: SalutationTranslationConnection!
  customers(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): CustomerConnection
  customerAddresses(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): CustomerAddressConnection
  orderCustomers(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): OrderCustomerConnection
  orderAddresses(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): OrderAddressConnection
  newsletterReceivers(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): NewsletterReceiverConnection
  translated: Json
}

"""The Result for a search that returns multiple Items"""
type SalutationConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [SalutationEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

"""Contains the information for one Edge"""
type SalutationEdge {
  """The Node of the Edge that contains the real element"""
  node: Salutation

  """The cursor to the Item of the Edge"""
  cursor: ID
}

type SalutationTranslation {
  displayName: String!
  letterName: String!
  salutationId: ID!
  languageId: ID!
  createdAt: Date!
  updatedAt: Date!
  salutation: Salutation
  language: Language
}

"""The Result for a search that returns multiple Items"""
type SalutationTranslationConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [SalutationTranslationEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

"""Contains the information for one Edge"""
type SalutationTranslationEdge {
  """The Node of the Edge that contains the real element"""
  node: SalutationTranslation

  """The cursor to the Item of the Edge"""
  cursor: ID
}

type ScheduledTask {
  id: ID!
  name: String!
  scheduledTaskClass: String!
  runInterval: Int!
  status: String!
  lastExecutionTime: Date
  nextExecutionTime: Date!
  deadMessages(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): DeadMessageConnection
}

"""The Result for a search that returns multiple Items"""
type ScheduledTaskConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [ScheduledTaskEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

"""Contains the information for one Edge"""
type ScheduledTaskEdge {
  """The Node of the Edge that contains the real element"""
  node: ScheduledTask

  """The cursor to the Item of the Edge"""
  cursor: ID
}

type SearchDocument {
  id: ID!
  languageId: ID!
  entityId: ID!
  entity: String!
  keyword: String!
  ranking: Float!
  attributes: Json
  language: Language
}

"""The Result for a search that returns multiple Items"""
type SearchDocumentConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [SearchDocumentEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

"""Contains the information for one Edge"""
type SearchDocumentEdge {
  """The Node of the Edge that contains the real element"""
  node: SearchDocument

  """The cursor to the Item of the Edge"""
  cursor: ID
}

"""The DAL query that is used to filter the Items"""
input SearchQuery {
  """The query type"""
  type: QueryTypes!

  """The operator used to combine the queries"""
  operator: QueryOperator

  """A nested list of SearchQueries"""
  queries: [SearchQuery]

  """The field used in the Query"""
  field: String

  """The value with which the field will be compared"""
  value: String

  """
  A list of parameters with which the field will be compared in a Range Query
  """
  parameters: [Parameter]
}

type SeoUrl {
  id: ID!
  salesChannelId: ID!
  foreignKey: ID!
  routeName: String!
  pathInfo: String!
  seoPathInfo: String!
  isCanonical: Boolean
  isModified: Boolean
  isDeleted: Boolean
  isValid: Boolean
  autoIncrement: Int
  attributes: Json
  createdAt: Date!
  updatedAt: Date!
  salesChannel: SalesChannel
  url: String
}

"""The Result for a search that returns multiple Items"""
type SeoUrlConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [SeoUrlEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

"""Contains the information for one Edge"""
type SeoUrlEdge {
  """The Node of the Edge that contains the real element"""
  node: SeoUrl

  """The cursor to the Item of the Edge"""
  cursor: ID
}

type SeoUrlTemplate {
  id: ID
  salesChannelId: ID
  entityName: String!
  routeName: String!
  template: String!
  isValid: Boolean
  createdAt: Date!
  updatedAt: Date!
  attributes: Json
  salesChannel: SalesChannel
}

"""The Result for a search that returns multiple Items"""
type SeoUrlTemplateConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [SeoUrlTemplateEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

"""Contains the information for one Edge"""
type SeoUrlTemplateEdge {
  """The Node of the Edge that contains the real element"""
  node: SeoUrlTemplate

  """The cursor to the Item of the Edge"""
  cursor: ID
}

type ShippingMethod {
  id: ID!
  bindShippingfree: Boolean!
  name: String
  active: Boolean
  shippingFree: Float
  attributes: String
  availabilityRuleId: ID
  mediaId: ID
  createdAt: Date!
  updatedAt: Date!
  deliveryTimeId: ID!
  deliveryTime: DeliveryTime
  salesChannelDefaultAssignments(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): SalesChannelConnection
  description: String
  orderDeliveries(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): OrderDeliveryConnection
  translations: ShippingMethodTranslationConnection!
  salesChannels(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): SalesChannelConnection
  availabilityRule: Rule
  prices(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): ShippingMethodPriceConnection
  media: Media
  tags(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): TagConnection
  translated: Json
}

"""The Result for a search that returns multiple Items"""
type ShippingMethodConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [ShippingMethodEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

"""Contains the information for one Edge"""
type ShippingMethodEdge {
  """The Node of the Edge that contains the real element"""
  node: ShippingMethod

  """The cursor to the Item of the Edge"""
  cursor: ID
}

type ShippingMethodPrice {
  id: ID!
  shippingMethodId: ID!
  currencyId: ID!
  ruleId: ID
  calculation: Int
  calculationRuleId: ID
  quantityStart: Float
  quantityEnd: Float
  price: Float!
  attributes: Json
  createdAt: Date!
  updatedAt: Date!
  shippingMethod: ShippingMethod
  currency: Currency
  rule: Rule
  calculationRule: Rule
}

"""The Result for a search that returns multiple Items"""
type ShippingMethodPriceConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [ShippingMethodPriceEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

"""Contains the information for one Edge"""
type ShippingMethodPriceEdge {
  """The Node of the Edge that contains the real element"""
  node: ShippingMethodPrice

  """The cursor to the Item of the Edge"""
  cursor: ID
}

type ShippingMethodTranslation {
  name: String!
  description: String
  attributes: Json
  shippingMethodId: ID!
  languageId: ID!
  createdAt: Date!
  updatedAt: Date!
  shippingMethod: ShippingMethod
  language: Language
}

"""The Result for a search that returns multiple Items"""
type ShippingMethodTranslationConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [ShippingMethodTranslationEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

"""Contains the information for one Edge"""
type ShippingMethodTranslationEdge {
  """The Node of the Edge that contains the real element"""
  node: ShippingMethodTranslation

  """The cursor to the Item of the Edge"""
  cursor: ID
}

type Snippet {
  id: ID!
  setId: ID!
  translationKey: String!
  value: String!
  author: String!
  attributes: Json
  createdAt: Date!
  updatedAt: Date!
  set: SnippetSet
}

"""The Result for a search that returns multiple Items"""
type SnippetConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [SnippetEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

"""Contains the information for one Edge"""
type SnippetEdge {
  """The Node of the Edge that contains the real element"""
  node: Snippet

  """The cursor to the Item of the Edge"""
  cursor: ID
}

type SnippetSet {
  id: ID!
  name: String!
  baseFile: String!
  iso: String!
  attributes: Json
  createdAt: Date!
  updatedAt: Date!
  snippets(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): SnippetConnection
  salesChannelDomains(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): SalesChannelDomainConnection
}

"""The Result for a search that returns multiple Items"""
type SnippetSetConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [SnippetSetEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

"""Contains the information for one Edge"""
type SnippetSetEdge {
  """The Node of the Edge that contains the real element"""
  node: SnippetSet

  """The cursor to the Item of the Edge"""
  cursor: ID
}

"""The possible sort directions"""
enum SortDirection {
  """Ascending sort direction"""
  ASC

  """Descending sort direction"""
  DESC
}

type StateMachine {
  id: ID!
  technicalName: String!
  name: String
  attributes: String
  states(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): StateMachineStateConnection
  transitions(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): StateMachineTransitionConnection
  initialStateId: ID
  translations: StateMachineTranslationConnection!
  createdAt: Date!
  updatedAt: Date!
  historyEntries(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): StateMachineHistoryConnection
  translated: Json
}

"""The Result for a search that returns multiple Items"""
type StateMachineConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [StateMachineEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

"""Contains the information for one Edge"""
type StateMachineEdge {
  """The Node of the Edge that contains the real element"""
  node: StateMachine

  """The cursor to the Item of the Edge"""
  cursor: ID
}

type StateMachineHistory {
  id: ID!
  stateMachineId: ID!
  stateMachine: StateMachine
  entityName: String!
  entityId: Json!
  fromStateId: ID!
  fromStateMachineState: StateMachineState
  toStateId: ID!
  toStateMachineState: StateMachineState
  transitionActionName: String
  userId: ID
  user: User
  createdAt: Date!
}

"""The Result for a search that returns multiple Items"""
type StateMachineHistoryConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [StateMachineHistoryEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

"""Contains the information for one Edge"""
type StateMachineHistoryEdge {
  """The Node of the Edge that contains the real element"""
  node: StateMachineHistory

  """The cursor to the Item of the Edge"""
  cursor: ID
}

type StateMachineState {
  id: ID!
  technicalName: String!
  name: String
  stateMachineId: ID!
  stateMachine: StateMachine
  fromStateMachineTransitions(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): StateMachineTransitionConnection
  toStateMachineTransitions(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): StateMachineTransitionConnection
  translations: StateMachineStateTranslationConnection!
  orderTransactions(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): OrderTransactionConnection
  orderDeliveries(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): OrderDeliveryConnection
  orders(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): OrderConnection
  attributes: String
  createdAt: Date!
  updatedAt: Date!
  toStateMachineHistoryEntries(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): StateMachineHistoryConnection
  fromStateMachineHistoryEntries(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): StateMachineHistoryConnection
  translated: Json
}

"""The Result for a search that returns multiple Items"""
type StateMachineStateConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [StateMachineStateEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

"""Contains the information for one Edge"""
type StateMachineStateEdge {
  """The Node of the Edge that contains the real element"""
  node: StateMachineState

  """The cursor to the Item of the Edge"""
  cursor: ID
}

type StateMachineStateTranslation {
  name: String!
  attributes: Json
  stateMachineStateId: ID!
  languageId: ID!
  createdAt: Date!
  updatedAt: Date!
  stateMachineState: StateMachineState
  language: Language
}

"""The Result for a search that returns multiple Items"""
type StateMachineStateTranslationConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [StateMachineStateTranslationEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

"""Contains the information for one Edge"""
type StateMachineStateTranslationEdge {
  """The Node of the Edge that contains the real element"""
  node: StateMachineStateTranslation

  """The cursor to the Item of the Edge"""
  cursor: ID
}

type StateMachineTransition {
  id: ID!
  actionName: String!
  stateMachineId: ID!
  stateMachine: StateMachine
  fromStateId: ID!
  fromStateMachineState: StateMachineState
  toStateId: ID!
  toStateMachineState: StateMachineState
  createdAt: Date!
  updatedAt: Date!
  attributes: Json
}

"""The Result for a search that returns multiple Items"""
type StateMachineTransitionConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [StateMachineTransitionEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

"""Contains the information for one Edge"""
type StateMachineTransitionEdge {
  """The Node of the Edge that contains the real element"""
  node: StateMachineTransition

  """The cursor to the Item of the Edge"""
  cursor: ID
}

type StateMachineTranslation {
  name: String!
  attributes: Json
  stateMachineId: ID!
  languageId: ID!
  createdAt: Date!
  updatedAt: Date!
  stateMachine: StateMachine
  language: Language
}

"""The Result for a search that returns multiple Items"""
type StateMachineTranslationConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [StateMachineTranslationEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

"""Contains the information for one Edge"""
type StateMachineTranslationEdge {
  """The Node of the Edge that contains the real element"""
  node: StateMachineTranslation

  """The cursor to the Item of the Edge"""
  cursor: ID
}

type StoreSettings {
  id: ID!
  key: String
  value: String
}

"""The Result for a search that returns multiple Items"""
type StoreSettingsConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [StoreSettingsEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

"""Contains the information for one Edge"""
type StoreSettingsEdge {
  """The Node of the Edge that contains the real element"""
  node: StoreSettings

  """The cursor to the Item of the Edge"""
  cursor: ID
}

type SystemConfig {
  id: ID!
  namespace: String!
  configurationKey: String!
  configurationValue: String!
  createdAt: Date!
  updatedAt: Date!
  salesChannelId: ID
  salesChannel: SalesChannel
}

"""The Result for a search that returns multiple Items"""
type SystemConfigConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [SystemConfigEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

"""Contains the information for one Edge"""
type SystemConfigEdge {
  """The Node of the Edge that contains the real element"""
  node: SystemConfig

  """The cursor to the Item of the Edge"""
  cursor: ID
}

type Tag {
  id: ID!
  name: String!
  createdAt: Date!
  updatedAt: Date!
  products(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): ProductConnection
  media(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): MediaConnection
  categories(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): CategoryConnection
  customers(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): CustomerConnection
  orders(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): OrderConnection
  shippingMethods(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): ShippingMethodConnection
}

"""The Result for a search that returns multiple Items"""
type TagConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [TagEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

"""Contains the information for one Edge"""
type TagEdge {
  """The Node of the Edge that contains the real element"""
  node: Tag

  """The cursor to the Item of the Edge"""
  cursor: ID
}

type Tax {
  id: ID!
  taxRate: Float!
  name: String!
  attributes: Json
  createdAt: Date!
  updatedAt: Date!
  products(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): ProductConnection
}

"""The Result for a search that returns multiple Items"""
type TaxConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [TaxEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

"""Contains the information for one Edge"""
type TaxEdge {
  """The Node of the Edge that contains the real element"""
  node: Tax

  """The cursor to the Item of the Edge"""
  cursor: ID
}

type Unit {
  id: ID!
  shortCode: String
  name: String
  attributes: String
  createdAt: Date!
  updatedAt: Date!
  products(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): ProductConnection
  translations: UnitTranslationConnection!
  translated: Json
}

"""The Result for a search that returns multiple Items"""
type UnitConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [UnitEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

"""Contains the information for one Edge"""
type UnitEdge {
  """The Node of the Edge that contains the real element"""
  node: Unit

  """The cursor to the Item of the Edge"""
  cursor: ID
}

type UnitTranslation {
  shortCode: String!
  name: String!
  attributes: Json
  unitId: ID!
  languageId: ID!
  createdAt: Date!
  updatedAt: Date!
  unit: Unit
  language: Language
}

"""The Result for a search that returns multiple Items"""
type UnitTranslationConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [UnitTranslationEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

"""Contains the information for one Edge"""
type UnitTranslationEdge {
  """The Node of the Edge that contains the real element"""
  node: UnitTranslation

  """The cursor to the Item of the Edge"""
  cursor: ID
}

type User {
  id: ID!
  localeId: ID!
  avatarId: ID
  username: String!
  firstName: String!
  lastName: String!
  email: String!
  active: Boolean
  attributes: Json
  createdAt: Date!
  updatedAt: Date!
  locale: Locale
  media(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): MediaConnection
  accessKeys(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): UserAccessKeyConnection
  stateMachineHistoryEntries(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): StateMachineHistoryConnection
  storeToken: String
}

type UserAccessKey {
  id: ID!
  userId: ID!
  accessKey: String!
  writeAccess: Boolean
  lastUsageAt: Date
  attributes: Json
  createdAt: Date!
  user: User
}

"""The Result for a search that returns multiple Items"""
type UserAccessKeyConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [UserAccessKeyEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

"""Contains the information for one Edge"""
type UserAccessKeyEdge {
  """The Node of the Edge that contains the real element"""
  node: UserAccessKey

  """The cursor to the Item of the Edge"""
  cursor: ID
}

"""The Result for a search that returns multiple Items"""
type UserConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [UserEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

"""Contains the information for one Edge"""
type UserEdge {
  """The Node of the Edge that contains the real element"""
  node: User

  """The cursor to the Item of the Edge"""
  cursor: ID
}

type UserRecovery {
  id: ID!
  hash: String!
  userId: ID!
  createdAt: Date!
}

"""The Result for a search that returns multiple Items"""
type UserRecoveryConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [UserRecoveryEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

"""Contains the information for one Edge"""
type UserRecoveryEdge {
  """The Node of the Edge that contains the real element"""
  node: UserRecovery

  """The cursor to the Item of the Edge"""
  cursor: ID
}

type Version {
  id: ID!
  name: String!
  createdAt: Date!
  updatedAt: Date!
  commits(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): VersionCommitConnection
}

type VersionCommit {
  id: ID!
  versionId: ID!
  userId: ID
  integrationId: ID
  autoIncrement: Int
  isMerge: Boolean
  message: String
  createdAt: Date!
  data(
    """The count of items to be returned"""
    first: Int

    """The count of items to be returned"""
    last: Int

    """The cursor to the first Result to be fetched"""
    after: String

    """The cursor to the last Result to be fetched"""
    before: String

    """The field used for sorting"""
    sortBy: String

    """The direction of the sorting"""
    sortDirection: SortDirection

    """The query the DAL should perform"""
    query: SearchQuery

    """The aggregations should perform"""
    aggregations: [Aggregation]
  ): VersionCommitDataConnection
  version: Version
}

"""The Result for a search that returns multiple Items"""
type VersionCommitConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [VersionCommitEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

type VersionCommitData {
  id: ID!
  versionCommitId: ID!
  commit: VersionCommit
  userId: ID
  integrationId: ID
  autoIncrement: Int
  entityName: String!
  entityId: Json!
  action: String!
  payload: Json!
  createdAt: Date!
}

"""The Result for a search that returns multiple Items"""
type VersionCommitDataConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [VersionCommitDataEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

"""Contains the information for one Edge"""
type VersionCommitDataEdge {
  """The Node of the Edge that contains the real element"""
  node: VersionCommitData

  """The cursor to the Item of the Edge"""
  cursor: ID
}

"""Contains the information for one Edge"""
type VersionCommitEdge {
  """The Node of the Edge that contains the real element"""
  node: VersionCommit

  """The cursor to the Item of the Edge"""
  cursor: ID
}

"""The Result for a search that returns multiple Items"""
type VersionConnection {
  """The total of Items found by the Query"""
  total: Int

  """A List of the Items"""
  edges: [VersionEdge]

  """Additional information for pagination"""
  pageInfo: PageInfo

  """the result of aggregations"""
  aggregations: [AggregationResults]
}

"""Contains the information for one Edge"""
type VersionEdge {
  """The Node of the Edge that contains the real element"""
  node: Version

  """The cursor to the Item of the Edge"""
  cursor: ID
}
